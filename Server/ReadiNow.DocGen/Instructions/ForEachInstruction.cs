// Copyright 2011-2016 Global Software Innovation Pty Ltd
extern alias EdcReadinowCommon;
using EntityType = EdcReadinowCommon::EDC.ReadiNow.Model.EntityType;

using System;
using System.Collections.Generic;
using System.IO;

namespace ReadiNow.DocGen
{
    /// <summary>
    /// Instruction for rendering repeated content from a data source.
    /// </summary>
    /// <remarks>
    /// This class is also used for the 'list' and 'rows' instructions.
    /// </remarks>
    class ForEachInstruction : Instruction
    {
        /// <summary>
        /// The data source that will supply entities to be rendered.
        /// </summary>
        public DataSource DataSource { get; set;  }


        /// <summary>
        /// Generates the content for this instruction.
        /// </summary>
        /// <param name="context">The context.</param>
        protected override void OnGenerate(WriterContext context)
        {
            // Get entities
            IEnumerable<DataElement> data = DataSource.GetData(context);

            // Render for each entity
            foreach (var dataElement in data)
            {
                context.DataElementStack.Push(dataElement);
                try
                {
                    WriteChildren(context);
                }
                finally
                {
                    context.DataElementStack.Pop();
                }

                // Fix any inconsistencies in XML stack level resulting from mismatched children
                context.Writer.RealignOnNextWrite();
            }
        }


        /// <summary>
        /// Determine the type of entity that would be found in the context generated by this instruction.
        /// </summary>
        /// <returns>An EntityType</returns>
        protected override EntityType GetContextEntityType()
        {
            if (DataSource == null)
                throw new InvalidOperationException("DataSource must be set first");
            return DataSource.GetContextEntityType(this);
        }


        /// <summary>
        /// Show debug info for this instruction.
        /// </summary>
        /// <param name="writer">The writer.</param>
        /// <param name="indent">The indent.</param>
        public override void OnDebug(TextWriter writer, int indent)
        {
            DataSource.OnDebug(writer, indent);
        }

    }

}
