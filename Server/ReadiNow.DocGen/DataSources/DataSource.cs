// Copyright 2011-2016 Global Software Innovation Pty Ltd
extern alias EdcReadinowCommon;
using EntityType = EdcReadinowCommon::EDC.ReadiNow.Model.EntityType;

using System.Collections.Generic;
using System.IO;
using EDC.ReadiNow.Model;

namespace ReadiNow.DocGen
{
    /// <summary>
    /// Represents an entity being returned from a data source.
    /// </summary>
    class DataElement
    {
        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="entity">Entity being represented.</param>
        /// <param name="position">The index of this entity in the parent collection.</param>
        public DataElement(IEntity entity, int position)
        {
            Entity = entity;
            Position = position;
        }

        /// <summary>
        /// The entity being represented by the current data element.
        /// </summary>
        public IEntity Entity { get; set; }

        /// <summary>
        /// The zero-based position of this entity in the enumeration.
        /// </summary>
        public int Position { get; set; }
    }


    /// <summary>
    /// A source of zero or more entities for some context.
    /// </summary>
    abstract class DataSource
    {
        /// <summary>
        /// Return the entities for this data source.
        /// </summary>
        /// <param name="context">The context, such as the parent entity, from which these entities are being loaded.</param>
        /// <returns>List of entities.</returns>
        public abstract IEnumerable<DataElement> GetData(WriterContext context);


        /// <summary>
        /// Determine the type of entity that would be found in the context generated by this instruction.
        /// </summary>
        /// <param name="owner">The instruction that owns this data source.</param>
        /// <returns>
        /// An EntityType
        /// </returns>
        public virtual EntityType GetContextEntityType(Instruction owner)
        {
            return null;
        }


        /// <summary>
        /// Write debug info about this data source.
        /// </summary>
        public virtual void OnDebug(TextWriter writer, int indent)
        {
        }
    }

}
