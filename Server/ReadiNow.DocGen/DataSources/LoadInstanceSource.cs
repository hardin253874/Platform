// Copyright 2011-2016 Global Software Innovation Pty Ltd
extern alias EdcReadinowCommon;
using EntityType = EdcReadinowCommon::EDC.ReadiNow.Model.EntityType;

using System;
using System.Collections.Generic;
using EDC.ReadiNow.Model;

namespace ReadiNow.DocGen
{
    /// <summary>
    /// Loads a specific entity.
    /// </summary>
    class LoadInstanceSource : DataSource
    {
        /// <summary>
        /// The instance to load
        /// </summary>
        public IEntity Instance { get; set; }


        /// <summary>
        /// The type of the instance.
        /// </summary>
        /// <remarks>
        /// We can determine the type from the instance, but the instance may be of multiple types. This holds the type that was actually used to resolve the instance.
        /// </remarks>
        public EntityType EntityType { get; set; }


        /// <summary>
        /// Gets the instance.
        /// </summary>
        /// <param name="context">Unused</param>
        /// <returns>
        /// List of entities.
        /// </returns>
        public override IEnumerable<DataElement> GetData(WriterContext context) 
        {
            if (Instance != null)
            {
                DataElement elem = new DataElement(Instance, 0);
                yield return elem;
            }
        }


        /// <summary>
        /// Determine the type of entity that would be found in the context generated by this instruction.
        /// </summary>
        /// <param name="owner">The instruction that owns this data source.</param>
        /// <returns>An EntityType</returns>
        public override EntityType GetContextEntityType(Instruction owner)
        {
            if (EntityType == null)
            {
                if (Instance != null)
                    throw new InvalidOperationException("EntityType was not set, when it should have been.");
                return null;
            }

            return EntityType;
        }

    }

}
