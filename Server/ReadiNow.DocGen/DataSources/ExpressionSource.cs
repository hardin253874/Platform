// Copyright 2011-2016 Global Software Innovation Pty Ltd
extern alias EdcReadinowCommon;
using EntityType = EdcReadinowCommon::EDC.ReadiNow.Model.EntityType;

using System;
using System.Collections.Generic;
using System.Linq;
using EDC.ReadiNow.Expressions;
using EDC.ReadiNow.Model;

namespace ReadiNow.DocGen.DataSources
{
    /// <summary>
    /// Returns all instances of the specified type
    /// </summary>
    class ExpressionSource : DataSource
    {
        /// <summary>
        /// The expression.
        /// </summary>
        public IExpression Expression { get; set; }

        /// <summary>
        /// Get all instances of the requested type.
        /// </summary>
        /// <param name="context">The context, such as the parent entity, from which these entities are being loaded.</param>
        /// <returns>List of entities.</returns>
        public override IEnumerable<DataElement> GetData(WriterContext context)
        {
            EvaluationSettings settings = new EvaluationSettings
            {
                ContextEntity = context.CurrentEntity,
                TimeZoneName = context.Settings.TimeZoneName,
            };
            ExpressionRunResult result = context.ExternalServices.ExpressionRunner.Run(Expression, settings);

            IEnumerable<IEntity> instances;

            if (result.Value == null)
            {
                instances = Enumerable.Empty<IEntity>();
            }
            else
            {
                instances = result.Value as IEnumerable<IEntity>;
                if (instances == null)
                {
                    IEntity instance = result.Value as IEntity;
                    if (instance != null)
                        instances = new[] {instance};
                    else
                        throw new Exception("Expected result to be list of entities.");
                            // assert false, the cast step should ensure this, or have thrown a ParseException
                }
            }

            return instances.Select((entity, pos) => new DataElement(entity, pos));
        }


        /// <summary>
        /// Determine the type of entity that would be found in the context generated by this instruction.
        /// </summary>
        /// <param name="owner">The instruction that owns this data source.</param>
        /// <returns>An EntityType</returns>
        public override EntityType GetContextEntityType(Instruction owner)
        {
            if (_entityType == null)
            {
                IEntityRef entityType = Expression.ResultType.EntityType;
                _entityType = entityType.Entity.As<EntityType>();
            }
            return _entityType;
        }
        EntityType _entityType;

    }

}
