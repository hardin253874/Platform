// Copyright 2011-2016 Global Software Innovation Pty Ltd
using System;
using System.Collections.Generic;
using System.IO;
using EDC.ReadiNow.Common.ConfigParser.Logging;

namespace EDC.ReadiNow.CodeGen
{
	internal class Program
	{
		/// <summary>
		///     Event log source.
		/// </summary>
		public static readonly string EventLogSource = "EDC Code Generator";

		/// <summary>
		///     Default output path.
		/// </summary>
		private static string _outputPath = @"..\..\AutoGenerated";

		/// <summary>
		///     Default namespace.
		/// </summary>
		private static string _namespace = "EDC.ReadiNow";

		/// <summary>
		///     Xml input files
		/// </summary>
		private static readonly List<string> XmlFiles = new List<string>( );

		/// <summary>
		///     T4 input files.
		/// </summary>
		private static readonly List<string> TtFiles = new List<string>( );

		/// <summary>
		///     Main program entry point.
		/// </summary>
		/// <param name="arguments">
		///     The arguments.
		/// </param>
		/// <returns>
		///     Return code.
		/// </returns>
		private static int Main( string[] arguments )
		{
			try
			{
				/////
				// Parse the input arguments.
				/////
				ParseArguments( arguments );

				return TemplateProcessor.GenerateTemplateInstances( XmlFiles, TtFiles, _outputPath, _namespace );
			}
			catch ( Exception ex )
			{
				Console.WriteLine( ex.Message );
				EventLog.WriteError( ex.ToString( ), EventLogSource );
				return 1;
			}
		}

		/// <summary>
		///     Parses the arguments.
		/// </summary>
		/// <param name="arguments">
		///     The arguments.
		/// </param>
		private static void ParseArguments( string[] arguments )
		{
			if ( arguments == null || arguments.Length < 1 )
			{
				/////
				// Show the expected usage.
				/////
				const string usage = "Usage:\nCodeGen.exe [-o outputPath] [-n namespace] -i input.xml [-i input2.xml etc...] -t template.tt [-t template2.tt etc...]";

				Console.WriteLine( usage );

				throw new InvalidDataException( usage );
			}

			for ( int i = 0; i < arguments.Length; i++ )
			{
				string arg = arguments[ i ].Trim();

				if ( arg.ToLowerInvariant( ) == "-o" )
				{
					/////
					// Read the output path.
					/////
					i++;
					if ( i < arguments.Length )
					{
						_outputPath = arguments[ i ].Trim();
					}
				}
				else if ( arg.ToLowerInvariant( ) == "-n" )
				{
					/////
					// Read the namespace.
					/////
					i++;
					if ( i < arguments.Length )
					{
						_namespace = arguments[ i ].Trim();
					}
				}
				else if ( arg.ToLowerInvariant( ) == "-i" )
				{
					/////
					// Read the input file.
					/////
					i++;
					if ( i < arguments.Length )
					{
						XmlFiles.Add( arguments[ i ].Trim() );
					}
				}
				else if ( arg.ToLowerInvariant( ) == "-t" )
				{
					/////
					// Read the template file.
					/////
					i++;
					if ( i < arguments.Length )
					{
						TtFiles.Add( arguments[ i ].Trim() );
					}
				}
			}

			/////
			// Ensure the output path exists.
			/////
			if ( !Directory.Exists( _outputPath ) )
			{
				Directory.CreateDirectory( _outputPath );
			}
		}
	}
}