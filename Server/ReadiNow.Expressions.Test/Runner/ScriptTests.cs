// Copyright 2011-2016 Global Software Innovation Pty Ltd
using ReadiNow.Expressions.Evaluation;
using NUnit.Framework;
using EDC.ReadiNow.Test;

namespace ReadiNow.Expressions.Test.Runner
{
    [TestFixture]
	[RunWithTransaction]
    public class ScriptTests
    {
        // Test literals
        [TestCase("script: ''          					;expect: string:")]
        [TestCase("script: 'Hello'          			;expect: string:Hello")]
        [TestCase("script: 'He''llo'          			;expect: string:He'llo")]
        [TestCase("script: ‘Hello’          			;expect: string:Hello")]
        [TestCase("script: ’Hello’          			;expect: string:Hello")]
        [TestCase("script: ‘Hello‘          			;expect: string:Hello")]
        [TestCase("script: 'He’’llo'          			;expect: string:He'llo")]
        [TestCase("script: 123          				;expect: int:123")]
        [TestCase("script: -123          				;expect: int:-123")]
        [TestCase("script: 1.5          				;expect: decimal:1.5")]
        [TestCase("script: -1.5          				;expect: decimal:-1.5")]
        [TestCase("script: true          				;expect: bool:true")]
        [TestCase("script: false          				;expect: bool:false")]
        [TestCase("script: #2012-3-1#       			;expect: date:2012-03-01")]
        [TestCase("script: #2012-03-31#       			;expect: date:2012-03-31")]
        [TestCase("script: #31/3/2012#       			;expect: date:2012-03-31")]
        [TestCase("script: #31/3/12#       			    ;expect: date:2012-03-31")]
        [TestCase("script: #13:34#       			    ;expect: time:13:34:00")]
        [TestCase("script: #13:34:45#       			;expect: time:13:34:45")]
        [TestCase("script: #1:34 PM#       			    ;expect: time:13:34:00")]
        [TestCase("script: #1:34:45 PM#       			;expect: time:13:34:45")]
        [TestCase("script: #9:34:45#       			    ;expect: time:9:34:45")]
        [TestCase("script: #31/3/12 1:34 PM#       	    ;expect: datetime:2012-03-31 13:34:00")]
        [TestCase("script: #31/3/12 13:34#       	    ;expect: datetime:2012-03-31 13:34:00")]
        [TestCase("script: #2012-03-31 1:34 PM#       	;expect: datetime:2012-03-31 13:34:00")]
        [TestCase("script: #2012-03-31 13:34#       	;expect: datetime:2012-03-31 13:34:00")]
        [TestCase("script: #2012-03-31 13:34:45#       	;expect: datetime:2012-03-31 13:34:45")]
        [TestCase("script: #2012-03-31 13:34:45# + ''   ;expect: string:31/03/2012 1:34 PM")]
        [TestCase("script: null          				;expect: none:null")]
        [RunAsDefaultTenant]
        public void Calculations_Literals(string test)
        {
            TestHelper.Test(test);
        }


        [TestCase("script: let x=1 select x                         ;expect: int:1")]
        [TestCase("script: let x=1.1 select x                       ;expect: decimal:1.1")]
        [TestCase("script: let x=true select x                      ;expect: bool:true")]
        [TestCase("script: let x=false select x                     ;expect: bool:false")]
        [TestCase("script: let x='abc' select x                     ;expect: string:abc")]
        [TestCase("script: let x=false select x and true            ;expect: bool:false")]
        [TestCase("script: let x=true select x and true             ;expect: bool:true")]
        [TestCase("script: let x=null select x                      ;expect: none:null")]
        [TestCase("script: let x=1 let y=2 select x+y               ;expect: int:3")]
        [TestCase("script: let x=1 let y=x+2 select y               ;expect: int:3")]
        [TestCase("script: 1 + (let x=1 select x) + 2               ;expect: int:4")]
        [TestCase("script: let x = 1 select (let y=2 select x+y)    ;expect: int:3")]
        [TestCase("script: let x=3*abs(-4) select x                 ;expect: int:12")]
        [TestCase("script: let x=p select x                         ;param:p=AA_Person:Peter Aylett        ;expect: AA_Person:Peter Aylett")]
        [TestCase("script: let x=p select x.[First Name]            ;param:p=AA_Person:Peter Aylett        ;expect: string:Peter")]
        [RunAsDefaultTenant]
        public void Calculations_Variables(string test)
        {
            TestHelper.Test(test);
        }

        [TestCase("script: p                            ;param:p=none:null                  ;expect: none:null")]
        [TestCase("script: p                            ;param:p=int:1                      ;expect: int:1")]
        [TestCase("script: p                            ;param:p=int:null                   ;expect: int:null")]
        [TestCase("script: p                            ;param:p=bool:true                  ;expect: bool:true")]
        [TestCase("script: p                            ;param:p=bool:false                 ;expect: bool:false")]
        [TestCase("script: p                            ;param:p=bool:null                  ;expect: bool:false")]
        [TestCase("script: p                            ;param:p=decimal:1                  ;expect: decimal:1")]
        [TestCase("script: p                            ;param:p=decimal:1.1                ;expect: decimal:1.1")]
        [TestCase("script: p                            ;param:p=decimal:null               ;expect: decimal:null")]
        [TestCase("script: p                            ;param:p=string:abc                 ;expect: string:abc")]
        [TestCase("script: p                            ;param:p=string:null                ;expect: string:null")]
        [TestCase("script: p                            ;param:p=date:2012-12-01            ;expect: date:2012-12-01")]
        [TestCase("script: p                            ;param:p=date:null                  ;expect: date:null")]
        [TestCase("script: p                            ;param:p=time:13:30:00              ;expect: time:13:30:00")]
        [TestCase("script: p                            ;param:p=time:null                  ;expect: time:null")]
        [TestCase("script: p                            ;param:p=datetime:2012-01-01 1:30 PM;expect: datetime:2012-01-01 1:30 PM")]
        [TestCase("script: p                            ;param:p=datetime:null              ;expect: datetime:null")]
        [TestCase("script: p                            ;param:p=AA_Person:Peter Aylett        ;expect: AA_Person:Peter Aylett")]
        [TestCase("script: p                            ;param:p=AA_Employee list:Scott Hopwood,Peter Aylett        ;expect: AA_Employee list:Scott Hopwood,Peter Aylett")]
        [TestCase("script: [p.q]                        ;param:p.q=int:1                    ;expect: int:1")]
        [TestCase("script: p.q                          ;param:p.q=int:1                    ;expect: int:1")]
        [TestCase("script: p.q.r                        ;param:p.q.r=int:1                  ;expect: int:1")]
        [TestCase("script: @[p.q]                       ;param:p.q=int:1                    ;expect: int:1")]
        [TestCase("script: @p.q                         ;param:p.q=int:1                    ;expect: int:1")]
        [TestCase("script: @p.q.r                       ;param:p.q.r=int:1                  ;expect: int:1")]
        [TestCase("script: p.q.r                        ;param:p.q.r=AA_Person:Peter Aylett    ;expect: AA_Person:Peter Aylett")]
        [TestCase("script: p.q.r.[First Name]           ;param:p.q.r=AA_Person:Peter Aylett    ;expect: string:Peter")]
        [TestCase("script: p.[First Name]               ;param:p=AA_Person:Peter Aylett        ;expect: string:Peter")]
        [TestCase("script: p.[First Name]               ;param:p=AA_Person:Peter Aylett ;param:p.q=int:2     ;expect: string:Peter")]
        [TestCase("script: p                            ;param:p=int:1 ;param:p.q=int:2     ;expect: int:1")]
        [TestCase("script: p.q                          ;param:p=int:1 ;param:p.q=int:2     ;expect: int:2")]
        [TestCase("script: p.[First Name]               ;param:p=AA_Person:Peter Aylett ;param:p.First Name=int:2     ;expect: int:2")]
        [TestCase("script: @[p].[First Name]            ;param:p=AA_Person:Peter Aylett ;param:p.First Name=int:2     ;expect: int:2")]
        [TestCase("script: @p.[First Name]              ;param:p=AA_Person:Peter Aylett ;param:p.First Name=int:2     ;expect: int:2")]
        [RunAsDefaultTenant]
        public void Calculations_Parameters(string test)
        {
            TestHelper.Test(test);
        }

        // Concatenation
        [TestCase("script: 1 + 'hello'          		;expect: string:1hello")]
        [TestCase("script: 1.5 + 'hello'          		;expect: string:1.5hello")]
        [TestCase("script: 'hello' + 1          		;expect: string:hello1")]
        [TestCase("script: 'hello' + 1.5          		;expect: string:hello1.5")]
        [TestCase("script: true + 'hello'          		;expect: string:Yeshello")]
        [TestCase("script: 'hello' + true          		;expect: string:helloYes")]
        [TestCase("script: false + 'hello'          	;expect: string:Nohello")]
        [TestCase("script: 'abc' + 'def'                ;expect: string:abcdef")]
        [TestCase("script: 'abc'+'def'                  ;expect: string:abcdef")]
        [TestCase("script: ''+''                        ;expect: string:")]
        // Negate
        [TestCase("script: - 123                        ;expect: int:-123")]
        [TestCase("script: - 123.1                      ;expect: decimal:-123.1")]
        [TestCase("script: --123.1                      ;expect: decimal:123.1")]
        [TestCase("script: --123                        ;expect: int:123")]
        // Plus
        [TestCase("script: 1 + 1.5          			;expect: decimal:2.5")]
        [TestCase("script: 1.5 + 1          			;expect: decimal:2.5")]
        [TestCase("script: 1 + 3                        ;expect: int:4")]
        [TestCase("script: 1 + -3                       ;expect: int:-2")]
        [TestCase("script: 1.1 + 3.1                    ;expect: decimal:4.2")]
        [TestCase("script: 1.1 + -3.1                   ;expect: decimal:-2.0")]
        // Minus
        [TestCase("script: 1 - 3                        ;expect: int:-2")]
        [TestCase("script: 1 - -3                       ;expect: int:4")]
        [TestCase("script: 1.1 - 3.1                    ;expect: decimal:-2.0")]
        [TestCase("script: 1.1 - -3.1                   ;expect: decimal:4.2")]
        // Multiply
        [TestCase("script: 2 * 12                       ;expect: int:24")]
        [TestCase("script: -2 * 12                      ;expect: int:-24")]
        [TestCase("script: 1.6 * 3.2                    ;expect: decimal:5.12")]
        [TestCase("script: -1.6 * 3.2                   ;expect: decimal:-5.12")]
        [TestCase("script: -1.6 * 2                     ;host:Evaluate; convertto:string; expect: string:-3.2" )]
        [TestCase("script: 2 * 1.6                      ;host:Evaluate; convertto:string; expect: string:3.2" )]
        // Divide
        [TestCase("script: 4.2 / 2.1                    ;expect: decimal:2.0")]
        [TestCase("script: 4.2 / -2.1                   ;expect: decimal:-2.0")]
        [TestCase("script: -4.2 / 2.1                   ;expect: decimal:-2.0")]
        // Modulo
        [TestCase("script: 4 % 12                       ;expect: int:4")]
        [TestCase("script: 16 % 12                      ;expect: int:4")]
        [TestCase("script: -4 % 12                      ;expect: int:-4")]
        // Brackets
        [TestCase("script: (3+4)*5                      ;expect: int:35")]
        [TestCase("script: 5*(3+4)                      ;expect: int:35")]
        // Order of operations
        [TestCase("script: 3+4*5                        ;expect: int:23")]
        [TestCase("script: 4*5+3                        ;expect: int:23")]
        [TestCase("script: 1+-3-4                       ;expect: int:-6")]
        [TestCase("script: 4*5/2                        ;expect: decimal:10")]
        // Is null
        [TestCase("script: null is not null             ;expect: bool:false")]
        [TestCase("script: 1 is not null                ;expect: bool:true")]
        [TestCase("script: null is null                 ;expect: bool:true")]
        [TestCase("script: 1 is null                    ;expect: bool:false")]
        [TestCase("script: 1+2 is null                  ;expect: bool:false")]
        [TestCase("script: 1.1 is null                  ;expect: bool:false")]
        [TestCase("script: 'abc' is null                ;expect: bool:false")]
        [TestCase("script: 1 is null                    ;expect: bool:false")]
        [TestCase("script: 1 is null                    ;expect: bool:false")]
        [TestCase("script: p is null                    ;param:p=none:null                  ;expect: bool:true")]
        [TestCase("script: p is null                    ;param:p=int:1                      ;expect: bool:false")]
        [TestCase("script: p is null                    ;param:p=int:null                   ;expect: bool:true")]
        [TestCase("script: p is null                    ;param:p=decimal:1.1                ;expect: bool:false")]
        [TestCase("script: p is null                    ;param:p=decimal:null               ;expect: bool:true")]
        [TestCase("script: p is null                    ;param:p=string:abc                 ;expect: bool:false")]
        [TestCase("script: p is null                    ;param:p=string:null                ;expect: bool:true")]
        [TestCase("script: p is null                    ;param:p=date:2012-12-01            ;expect: bool:false")]
        [TestCase("script: p is null                    ;param:p=date:null                  ;expect: bool:true")]
        [TestCase("script: p is null                    ;param:p=time:1753-01-01 1:30 PM    ;expect: bool:false")]
        [TestCase("script: p is null                    ;param:p=time:null                  ;expect: bool:true")]
        [TestCase("script: p is null                    ;param:p=datetime:2012-01-01 1:30 PM;expect: bool:false")]
        [TestCase("script: p is null                    ;param:p=datetime:null              ;expect: bool:true")]
        [TestCase("script: p is null                    ;param:p=AA_Person:Peter Aylett        ;expect: bool:false")]
        [TestCase("script: p is null                    ;param:p=AA_Person:null                ;expect: bool:true")]
        [TestCase("script: Manager is null              ;context:AA_Manager:Peter Aylett       ;expect: bool:false")]
        [TestCase("script: Manager is null              ;context:AA_Manager:Jude Jacobs        ;expect: bool:true")]
        [RunAsDefaultTenant]
        public void Calculations_Operators(string test)
        {
            TestHelper.Test(test);
        }

        [TestCase("script: iif(false,'a','b')           ;expect: string:b")]
        [TestCase("script: iif(false,1,2)               ;expect: int:2")]
        [TestCase("script: iif(false,1.1,2.2)           ;expect: decimal:2.2")]
        [TestCase("script: iif(false,1.1,null)          ;expect: decimal:null")]
        [TestCase("script: iif(false,null,2.2)          ;expect: decimal:2.2")]
        [TestCase("script: iif(null,1.1,2.2)            ;expect: decimal:2.2;  host:Evaluate")]        // TODO: Fix SQL
        [TestCase("script: iif(true,'a','b')            ;expect: string:a")]
        [TestCase("script: iif(true,1,2)                ;expect: int:1")]
        [TestCase("script: iif(true,1.1,2.2)            ;expect: decimal:1.1")]
        [TestCase("script: iif(true,1.1,null)           ;expect: decimal:1.1")]
        [TestCase("script: iif(true,null,2.2)           ;expect: decimal:null")]
        [TestCase("script: iif(false,1,iif(false,1,iif(false,1,iif(false,1,iif(false,1,iif(false,1,iif(false,1,iif(false,1,iif(false,1,iif(false,1,iif(false,1,iif(false,1,2))))))))))))  ;expect: int:2")]  // #22345 - Excessive nesting test, because SQL doesn't like nesting case statements beyond 10
        [TestCase("script: isnull('a','b')              ;expect: string:a")]
        [TestCase("script: isnull('a',null)             ;expect: string:a")]
        [TestCase("script: isnull(1,2)                  ;expect: int:1")]
        [TestCase("script: isnull(1,null)               ;expect: int:1")]
        [TestCase("script: isnull(1.1,2.2)              ;expect: decimal:1.1")]
        [TestCase("script: isnull(1.1,null)             ;expect: decimal:1.1")]
        [TestCase("script: isnull(null,'b')             ;expect: string:b")]
        //[TestCase("script: isnull(null,2)               ;expect: 2")]      // fix me.. cast from None to Int doesn't match any better than the other signature involving decimal, etc
        [TestCase("script: isnull(null,2.2)             ;expect: decimal:2.2")]
        [RunAsDefaultTenant]
        public void Calculations_GeneralFunctions(string test)
        {
            TestHelper.Test(test);
        }


        [TestCase("script: ABS(-10)                     ;expect: int:10")]
        [TestCase("script: abs(-10)                     ;expect: int:10")]
        [TestCase("script: abs(-10.1)                   ;expect: decimal:10.1")]
        [TestCase("script: abs(0)                       ;expect: int:0")]
        [TestCase("script: abs(1.1-1.1)                 ;expect: decimal:0")]
        [TestCase("script: abs(10)                      ;expect: int:10")]
        [TestCase("script: abs(10.1)                    ;expect: decimal:10.1")]
        [TestCase("script: abs(null)                    ;expect: int:null")]
        [TestCase("script: ceiling(-10.5)               ;expect: int:-10")]
        [TestCase("script: ceiling(10.5)                ;expect: int:11")]
        [TestCase("script: ceiling(exp(4)*1000)/1000    ;expect: decimal:54.599")]
        [TestCase("script: ceiling(log(1000)*1000)/1000 ;expect: decimal:6.908")]
        [TestCase("script: ceiling(null)                ;expect: int:null")]
        [TestCase("script: floor(-10.5)                 ;expect: int:-11")]
        [TestCase("script: floor(10.5)                  ;expect: int:10")]
        [TestCase("script: floor(null)                  ;expect: int:null")]
        [TestCase("script: log(0)                       ;expect: decimal:null")]
        [TestCase("script: log(8,-1)                    ;expect: decimal:null       ;host:Evaluate")]   // need SQL 2012 for 2x param log
        [TestCase("script: log(8,0)                     ;expect: decimal:null       ;host:Evaluate")]
        [TestCase("script: log(8,0.5)                   ;expect: decimal:-3         ;host:Evaluate")]
        [TestCase("script: log(8,2)                     ;expect: decimal:3          ;host:Evaluate")]
        [TestCase("script: log(8,null)                  ;expect: decimal:null       ;host:Evaluate")]
        [TestCase("script: log(null)                    ;expect: decimal:null       ;host:Evaluate")]
        [TestCase("script: log(null,2)                  ;expect: decimal:null       ;host:Evaluate")]
        [TestCase("script: log10(0)                     ;expect: decimal:null")]
        [TestCase("script: log10(1000)                  ;expect: decimal:3")]
        [TestCase("script: log10(null)                  ;expect: decimal:null")]
        [TestCase("script: power(4,3)                   ;expect: decimal:64")]
        [TestCase("script: power(4,null)                ;expect: decimal:null")]
        [TestCase("script: power(null,3)                ;expect: decimal:null")]
        [TestCase("script: round(-0.5,-1)               ;expect: decimal:0.0")]
        [TestCase("script: round(-0.5,0)                ;expect: decimal:-1")]
        [TestCase("script: round(-1.5,0)                ;expect: decimal:-2")]
        [TestCase("script: round(-5.0,-1)               ;expect: decimal:-10.0")]
        [TestCase("script: round(-5.5,-1)               ;expect: decimal:-10.0")]
        [TestCase("script: round(0.0,0)                 ;expect: decimal:0")]
        [TestCase("script: round(0.5,-1)                ;expect: decimal:0.0")]
        [TestCase("script: round(0.5,0)                 ;expect: decimal:1")]
        [TestCase("script: round(0.5,1)                 ;expect: decimal:0.5")]
        [TestCase("script: round(0.55,1)                ;expect: decimal:0.6")]
        [TestCase("script: round(1.5,0)                 ;expect: decimal:2")]
        [TestCase("script: round(5.0,-1)                ;expect: decimal:10.0")]
        [TestCase("script: round(5.5,-1)                ;expect: decimal:10.0")]
        [TestCase("script: round(null,1)                ;expect: decimal:null")]
        [TestCase("script: round(1.1,null)              ;expect: decimal:null")]
        [TestCase("script: sign(-10)                    ;expect: int:-1")]
        [TestCase("script: sign(-10.5)                  ;expect: int:-1")]
        [TestCase("script: sign(0)                      ;expect: int:0")]
        [TestCase("script: sign(10)                     ;expect: int:1")]
        [TestCase("script: sign(10.5)                   ;expect: int:1")]
        [TestCase("script: sign(null)                   ;expect: int:null")]
        [TestCase("script: sqrt(-1)                     ;expect: decimal:null")]
        [TestCase("script: sqrt(-1.1)                   ;expect: decimal:null")]
        [TestCase("script: sqrt(0)                      ;expect: decimal:0")]
        [TestCase("script: sqrt(2.56)                   ;expect: decimal:1.6")]
        [TestCase("script: sqrt(null)                   ;expect: decimal:null")]
        [TestCase("script: square(-1.6)                 ;expect: decimal:2.56")]
        [TestCase("script: square(-16)                  ;expect: int:256")]
        [TestCase("script: square(1.6)                  ;expect: decimal:2.56")]
        [TestCase("script: square(16)                   ;expect: int:256")]
        [TestCase("script: square(null)                 ;expect: int:null")]
        [RunAsDefaultTenant]
        public void Calculations_NumericFunctions(string test)
        {
            TestHelper.Test(test);
        }

        [TestCase("script: charindex('blah','abcdefghi')            ;expect: int:0")]
        [TestCase("script: charindex('blah',null)                   ;expect: int:null")]
        [TestCase("script: charindex('def','abcdefdef', 4)          ;expect: int:4")]
        [TestCase("script: charindex('def','abcdefdef', 5)          ;expect: int:7")]
        [TestCase("script: charindex('def','abcdefghi')             ;expect: int:4")]
        [TestCase("script: charindex(null,'abcdefghi')              ;expect: int:null")]
        [TestCase("script: left('Hello',-2)             ;expect: string:                    ;host:Evaluate")]   // TODO: Fix for SQL
        [TestCase("script: left('Hello',0)              ;expect: string:")]
        [TestCase("script: left('Hello',10)             ;expect: string:Hello")]
        [TestCase("script: left('Hello',2)              ;expect: string:He")]
        [TestCase("script: left('Hello',null)           ;expect: string:null")]
        [TestCase("script: left(null,10)                ;expect: string:null")]
        [TestCase("script: len('')                      ;expect: int:0")]
        [TestCase("script: len('def')                   ;expect: int:3")]
        [TestCase("script: len(null)                    ;expect: int:null")]
        [TestCase("script: replace('Hello World','World','Everyone')    ;expect: string:Hello Everyone")]
        [TestCase("script: replace('ab','cd',null)      ;expect: string:null")]
        [TestCase("script: replace('ab',null,'ef')      ;expect: string:null")]
        [TestCase("script: replace('abcabcabc','abc','1')               ;expect: string:111")]
        [TestCase("script: replace(null,'cd','ef')      ;expect: string:null")]
        [TestCase("script: right('Hello',-2)            ;expect: string:                    ;host:Evaluate")]   // TODO: Fix for SQL
        [TestCase("script: right('Hello',0)             ;expect: string:")]
        [TestCase("script: right('Hello',10)            ;expect: string:Hello")]
        [TestCase("script: right('Hello',2)             ;expect: string:lo")]
        [TestCase("script: right('Hello',null)          ;expect: string:null")]
        [TestCase("script: right(null,10)               ;expect: string:null")]
        [TestCase("script: substring('Hello',-2,3)      ;expect: string:null                ;host:Evaluate")]   // TODO: Fix for SQL
        [TestCase("script: substring('Hello',1,5)       ;expect: string:Hello")]
        [TestCase("script: substring('Hello',2,-3)      ;expect: string:null                ;host:Evaluate")]   // TODO: Fix for SQL
        [TestCase("script: substring('Hello',2,3)       ;expect: string:ell")]
        [TestCase("script: substring('Hello',2,null)    ;expect: string:null")]
        [TestCase("script: substring('Hello',null,-3)   ;expect: string:null                ;host:Evaluate")]   // TODO: Fix for SQL
        [TestCase("script: substring(null,2,-3)         ;expect: string:null                ;host:Evaluate")]   // TODO: Fix for SQL
        [TestCase("script: tolower('')                  ;expect: string:")]
        [TestCase("script: tolower('Mixed')             ;expect: string:mixed")]
        [TestCase("script: tolower(null)                ;expect: string:null")]
        [TestCase("script: toupper('')                  ;expect: string:")]
        [TestCase("script: toupper('Mixed')             ;expect: string:MIXED")]
        [TestCase("script: toupper(null)                ;expect: string:null")]
        [RunAsDefaultTenant]
        public void Calculations_StringFunctions(string test)
        {
            TestHelper.Test(test);
        }

        [TestCase("script: getdate()                                            ;expect: date")]
        [TestCase("script: gettime()                                            ;expect: time")]
        [TestCase("script: getdatetime()                                        ;expect: datetime")]
        [TestCase("script: getdate() < datefromparts(2100,1,1)                  ;expect: bool:true")]
        [TestCase("script: getdate() < datefromparts(2100,1,1)                  ;expect: bool:true")]
        [TestCase("script: getdate() < datefromparts(2100,1,1)                  ;expect: bool:true")]
        [TestCase("script: getdate() > datefromparts(2013,1,1)                  ;expect: bool:true")]
        //[TestCase("script: getdatetime() < datetimefromparts(2100,1,1,0,0,0)    ;expect: bool:true")]     // oh dear, our time zone conversion functions don't like anything outside of 1901 and 2035(ish)
        [TestCase("script: getdatetime() < datetimefromparts(2030,1,1,0,0,0)    ;expect: bool:true")]
        [TestCase("script: getdatetime() > datetimefromparts(2013,1,1,0,0,0)    ;expect: bool:true")]
        [TestCase("script: gettime() <= timefromparts(23,59,59)                 ;expect: bool:true")]
        [TestCase("script: gettime() >= timefromparts(0,0,0)                    ;expect: bool:true")]
        [TestCase("script: '' + datefromparts(2012,12,31)          			    ;expect: string:31/12/2012")]
        [TestCase("script: '' + datetimefromparts(2012,12,31,13,30,59)          ;expect: string:31/12/2012 1:30 PM")]
        [TestCase("script: '' + timefromparts(13,30,59)          			    ;expect: string:1:30 PM")]
        [TestCase("script: datetimefromparts(2012,12,31,13,30,59)          	    ;expect: datetime:2012-12-31T13:30:59")]
        [TestCase("script: datetimefromparts(null,12,31,13,30,59)          	    ;expect: datetime:null")]
        [TestCase("script: datetimefromparts(2012,null,31,13,30,59)             ;expect: datetime:null")]
        [TestCase("script: datetimefromparts(2012,12,null,13,30,59)             ;expect: datetime:null")]
        [TestCase("script: datetimefromparts(2012,12,31,null,30,59)             ;expect: datetime:null")]
        [TestCase("script: datetimefromparts(2012,12,31,13,null,59)             ;expect: datetime:null")]
        [TestCase("script: datetimefromparts(2012,12,31,13,30,null)             ;expect: datetime:null")]
        [TestCase("script: datefromparts(2012,12,31)          				    ;expect: date:2012-12-31")]
        [TestCase("script: datefromparts(null,12,31)          				    ;expect: date:null")]
        [TestCase("script: datefromparts(2012,null,31)          				;expect: date:null")]
        [TestCase("script: datefromparts(2012,12,null)          				;expect: date:null")]
        [TestCase("script: timefromparts(13,30,59)          				    ;expect: time:13:30:59")]
        [TestCase("script: timefromparts(null,30,59)          				    ;expect: time:null")]
        [TestCase("script: timefromparts(13,null,59)          				    ;expect: time:null")]
        [TestCase("script: timefromparts(13,30,null)          				    ;expect: time:null")]
        [RunAsDefaultTenant]
        public void Calculations_DateFunctions(string test)
        {
            TestHelper.Test(test);
        }


        [TestCase("script: year(datefromparts(2013,1,2))                        ;expect: int:2013")]
        [TestCase("script: year(datetimefromparts(2013,1,2,3,4,5))              ;expect: int:2013")]
        [TestCase("script: year(null)                                           ;expect: int:null")]
        [TestCase("script: quarter(datefromparts(2014,1,1))                     ;expect: int:1")]
        [TestCase("script: quarter(datefromparts(2014,3,31))                    ;expect: int:1")]
        [TestCase("script: quarter(datefromparts(2014,4,1))                     ;expect: int:2")]
        [TestCase("script: quarter(datetimefromparts(2014,1,1,3,4,5))           ;expect: int:1")]
        [TestCase("script: quarter(datetimefromparts(2014,3,31,23,59,0))        ;expect: int:1")]
        [TestCase("script: quarter(datetimefromparts(2014,4,1,0,0,0))           ;expect: int:2")]
        [TestCase("script: quarter(null)                                        ;expect: int:null")]
        [TestCase("script: month(datefromparts(2013,1,2))                       ;expect: int:1")]
        [TestCase("script: month(datetimefromparts(2013,1,2,3,4,5))             ;expect: int:1")]
        [TestCase("script: month(null)                                          ;expect: int:null")]
        [TestCase("script: day(datefromparts(2013,1,2))                         ;expect: int:2")]
        [TestCase("script: day(datetimefromparts(2013,1,2,3,4,5))               ;expect: int:2")]
        [TestCase("script: day(null)                                            ;expect: int:null")]
        [TestCase("script: dayofyear(datefromparts(2014,1,1))                   ;expect: int:1")]
        [TestCase("script: dayofyear(datefromparts(2014,12,31))                 ;expect: int:365")]
        [TestCase("script: dayofyear(datetimefromparts(2014,1,1,3,4,5))         ;expect: int:1")]
        [TestCase("script: dayofyear(null)                                      ;expect: int:null")]
        [TestCase("script: weekday(datefromparts(2014,8,24))                    ;expect: int:1")] //Sunday
        [TestCase("script: weekday(datefromparts(2014,8,30))                    ;expect: int:7")] //Saturday
        [TestCase("script: weekday(datetimefromparts(2014,8,24,3,4,5))          ;expect: int:1")]
        [TestCase("script: weekday(null)                                        ;expect: int:null")]
        [TestCase("script: week(datefromparts(2012,1,1))                        ;expect: int:1")] //Sunday
        [TestCase("script: week(datefromparts(2012,1,7))                        ;expect: int:1")] //Saturday
        [TestCase("script: week(datefromparts(2012,1,8))                        ;expect: int:2")] //Sunday
        [TestCase("script: week(datefromparts(2014,1,1))                        ;expect: int:1")] //Wednesday
        [TestCase("script: week(datefromparts(2014,1,4))                        ;expect: int:1")] //Saturday
        [TestCase("script: week(datefromparts(2014,12,31))                      ;expect: int:53")]
        [TestCase("script: week(datefromparts(2014,1,5))                        ;expect: int:2")] //Sunday
        [TestCase("script: week(datetimefromparts(2014,1,5,3,4,5))              ;expect: int:2")]
        [TestCase("script: week(null)                                           ;expect: int:null")]
        [TestCase("script: hour(datetimefromparts(2013,1,2,3,4,5))              ;expect: int:3")]
        [TestCase("script: hour(timefromparts(3,4,5))                           ;expect: int:3")]
        [TestCase("script: hour(null)                                           ;expect: int:null")]
        [TestCase("script: minute(datetimefromparts(2013,1,2,3,4,5))            ;expect: int:4")]
        [TestCase("script: minute(timefromparts(3,4,5))                         ;expect: int:4")]
        [TestCase("script: minute(null)                                         ;expect: int:null")]
        [TestCase("script: second(datetimefromparts(2013,1,2,3,4,5))            ;expect: int:5")]
        [TestCase("script: second(timefromparts(3,4,5))                         ;expect: int:5")]
        [TestCase("script: second(null)                                         ;expect: int:null")]
        [RunAsDefaultTenant]
        public void Calculations_GetDateParts(string test)
        {
            TestHelper.Test(test);
        }

        [TestCase("script: convert(date,'31/12/2013')                             ;host:Evaluate ;expect: date:31/12/2013")] // Bug #17415
        [TestCase("script: convert(date,'31/12/2013')                             ;host:Report   ;expect: date:null")]       // Bug #17415
        [TestCase("script: dateadd(year,   1,convert(date,'2012-01-25'))          ;expect: date:25/1/2013")]
        [TestCase("script: dateadd(quarter,1,convert(date,'2012-01-25'))          ;expect: date:25/4/2012")]
        [TestCase("script: dateadd(month,  1,convert(date,'2012-01-25'))          ;expect: date:25/2/2012")]
        [TestCase("script: dateadd(week,   1,convert(date,'2012-01-25'))          ;expect: date:1/2/2012")]
        [TestCase("script: dateadd(day,    1,convert(date,'2012-01-25'))          ;expect: date:26/1/2012")]
        [TestCase("script: dateadd(year,   -1,convert(date,'2012-01-25'))         ;expect: date:25/1/2011")]
        [TestCase("script: dateadd(quarter,-1,convert(date,'2012-01-25'))         ;expect: date:25/10/2011")]
        [TestCase("script: dateadd(month,  -1,convert(date,'2012-01-25'))         ;expect: date:25/12/2011")]
        [TestCase("script: dateadd(week,   -1,convert(date,'2012-01-25'))         ;expect: date:18/1/2012")]
        [TestCase("script: dateadd(day,    -1,convert(date,'2012-01-25'))         ;expect: date:24/1/2012")]
        [TestCase("script: dateadd(hour,    1,convert(time,'13:30:40'))          ;expect: time:14:30:40")]
        [TestCase("script: dateadd(minute,  1,convert(time,'13:30:40'))          ;expect: time:13:31:40")]
        [TestCase("script: dateadd(second,  1,convert(time,'13:30:40'))          ;expect: time:13:30:41")]
        [TestCase("script: dateadd(hour,    -1,convert(time,'13:30:40'))         ;expect: time:12:30:40")]
        [TestCase("script: dateadd(minute,  -1,convert(time,'13:30:40'))         ;expect: time:13:29:40")]
        [TestCase("script: dateadd(second,  -1,convert(time,'13:30:40'))         ;expect: time:13:30:39")]
        [TestCase("script: dateadd(hour,    25,convert(time,'13:30:40'))         ;expect: time:14:30:40")]
        [TestCase("script: dateadd(hour,    -23,convert(time,'13:30:40'))        ;expect: time:14:30:40")]
        [TestCase("script: dateadd(year,    1,convert(datetime, '2012-01-25T13:30:40'))     ;expect: datetime:2013-01-25T13:30:40")]
        [TestCase("script: dateadd(quarter, 1,convert(datetime, '2012-01-25T13:30:40'))     ;expect: datetime:2012-04-25T13:30:40")]
        [TestCase("script: dateadd(month,   1,convert(datetime, '2012-01-25T13:30:40'))     ;expect: datetime:2012-02-25T13:30:40")]
        [TestCase("script: dateadd(week,    1,convert(datetime, '2012-01-25T13:30:40'))     ;expect: datetime:2012-02-01T13:30:40")]
        [TestCase("script: dateadd(day,     1,convert(datetime, '2012-01-25T13:30:40'))     ;expect: datetime:2012-01-26T13:30:40")]
        [TestCase("script: dateadd(hour,    1,convert(datetime, '2012-01-25T13:30:40'))     ;expect: datetime:2012-01-25T14:30:40")]
        [TestCase("script: dateadd(minute,  1,convert(datetime, '2012-01-25T13:30:40'))     ;expect: datetime:2012-01-25T13:31:40")]
        [TestCase("script: dateadd(second,  1,convert(datetime, '2012-01-25T13:30:40'))     ;expect: datetime:2012-01-25T13:30:41")]
        [TestCase("script: dateadd(year,    1,getdate())                        ;expect: date")]
        [TestCase("script: dateadd(hour,    1,gettime())                        ;expect: time")]
        [TestCase("script: dateadd(day,     1,getdatetime())                    ;expect: datetime")]
        [TestCase("script: datediff(year, convert(date,'2012-01-01'), convert(date,'2012-12-31'))   ;expect: int:0")]
        [TestCase("script: datediff(year, convert(date,'2012-01-01'), convert(date,'2013-01-01'))   ;expect: int:1")]
        [TestCase("script: datediff(year, convert(date,'2011-12-31'), convert(date,'2013-01-01'))   ;expect: int:2")]
        [TestCase("script: datediff(quarter, convert(date,'2012-01-01'), convert(date,'2012-12-31'));expect: int:3")]
        [TestCase("script: datediff(quarter, convert(date,'2012-01-01'), convert(date,'2013-01-01'));expect: int:4")]
        [TestCase("script: datediff(quarter, convert(date,'2011-12-31'), convert(date,'2013-01-01'));expect: int:5")]
        [TestCase("script: datediff(month, convert(date,'2012-01-01'), convert(date,'2012-12-31'))  ;expect: int:11")]
        [TestCase("script: datediff(month, convert(date,'2012-01-01'), convert(date,'2013-01-01'))  ;expect: int:12")]
        [TestCase("script: datediff(month, convert(date,'2011-12-31'), convert(date,'2013-01-01'))  ;expect: int:13")]
        [TestCase("script: datediff(week, convert(date,'2013-06-22'), convert(date,'2013-06-23'))   ;expect: int:1")]
        [TestCase("script: datediff(week, convert(date,'2013-06-21'), convert(date,'2013-06-22'))   ;expect: int:0")]
        [TestCase("script: datediff(week, convert(date,'2013-06-23'), convert(date,'2013-06-29'))   ;expect: int:0")]
        [TestCase("script: datediff(week, convert(date,'2013-06-22'), convert(date,'2013-06-30'))   ;expect: int:2")]
        [TestCase("script: datediff(day, convert(date,'2013-06-22'), convert(date,'2013-06-22'))    ;expect: int:0")]
        [TestCase("script: datediff(day, convert(date,'2013-06-22'), convert(date,'2013-06-23'))    ;expect: int:1")]
        [TestCase("script: datediff(hour, convert(time,'13:30:00'), convert(time,'13:59:00'))       ;expect: int:0")]
        [TestCase("script: datediff(hour, convert(time,'13:30:00'), convert(time,'14:01:00'))       ;expect: int:1")]
        [TestCase("script: datediff(minute, convert(time,'13:30:10'), convert(time,'13:31:10'))     ;expect: int:1")]
        [TestCase("script: datediff(minute, convert(time,'13:30:10'), convert(time,'13:31:00'))     ;expect: int:1")]
        [TestCase("script: datediff(minute, convert(time,'13:30:10'), convert(time,'13:30:59'))     ;expect: int:0")]
        [TestCase("script: datediff(second, convert(time,'13:30:10'), convert(time,'13:32:00'))     ;expect: int:110")]
        [TestCase("script: datename(year,   convert(date,'2012-01-25'))                   ;expect: string:2012")]
        [TestCase("script: datename(quarter,convert(date,'2012-04-25'))                   ;expect: string:2")]
        [TestCase("script: datename(month,  convert(date,'2012-01-25'))                   ;expect: string:January")]
        [TestCase("script: datename(week,   convert(date,'2012-01-25'))                   ;expect: string:4")]
        [TestCase("script: datename(day,    convert(date,'2012-01-25'))                   ;expect: string:25")]
        [TestCase("script: datename(weekday,convert(date,'2012-01-25'))                   ;expect: string:Wednesday")]
        [TestCase("script: datename(dayofyear,convert(date,'2012-02-25'))                 ;expect: string:56")]
        [TestCase("script: datename(hour,   convert(time,'13:30:40'))                     ;expect: string:13")]
        [TestCase("script: datename(minute, convert(time,'13:30:40'))                     ;expect: string:30")]
        [TestCase("script: datename(second, convert(time,'13:30:40'))                     ;expect: string:40")]
        [TestCase("script: datename(year,   convert(datetime, '2012-01-25T13:30:40'))     ;expect: string:2012")]
        [TestCase("script: datename(quarter,convert(datetime, '2012-01-25T13:30:40'))     ;expect: string:1")]
        [TestCase("script: datename(month,  convert(datetime, '2012-01-25T13:30:40'))     ;expect: string:January")]
        [TestCase("script: datename(week,   convert(datetime, '2012-01-25T13:30:40'))     ;expect: string:4")]
        [TestCase("script: datename(day,    convert(datetime, '2012-01-25T13:30:40'))     ;expect: string:25")]
        [TestCase("script: datename(weekday,convert(datetime, '2012-01-25T13:30:40'))     ;expect: string:Wednesday")]
        [TestCase("script: datename(dayofyear,convert(datetime, '2012-01-25T13:30:40'))   ;expect: string:25")]
        [TestCase("script: datename(hour,   convert(datetime, '2012-01-25T13:30:40'))     ;expect: string:13")]
        [TestCase("script: datename(minute, convert(datetime, '2012-01-25T13:30:40'))     ;expect: string:30")]
        [TestCase("script: datename(second, convert(datetime, '2012-01-25T13:30:40'))     ;expect: string:40")]
        [RunAsDefaultTenant]
        public void Calculations_MiscDatePartFunctions(string test)
        {
            TestHelper.Test(test);
        }
        

        [TestCase("script: true AND true                ;expect: bool:true")]
        [TestCase("script: true And true                ;expect: bool:true")]
        [TestCase("script: true and true                ;expect: bool:true")]
        [TestCase("script: true and false               ;expect: bool:false")]
        [TestCase("script: false and true               ;expect: bool:false")]
        [TestCase("script: false and false              ;expect: bool:false")]
        [TestCase("script: false and null               ;expect: bool:false")]
        [TestCase("script: null and false               ;expect: bool:false")]
        [TestCase("script: true and null                ;expect: bool:false")]
        [TestCase("script: null and true                ;expect: bool:false")]
        [TestCase("script: null and null                ;expect: bool:false")]
        [TestCase("script: true OR true                 ;expect: bool:true")]
        [TestCase("script: true Or true                 ;expect: bool:true")]
        [TestCase("script: true or true                 ;expect: bool:true")]
        [TestCase("script: true or false                ;expect: bool:true")]
        [TestCase("script: false or true                ;expect: bool:true")]
        [TestCase("script: false or false               ;expect: bool:false")]
        [TestCase("script: false or null                ;expect: bool:false")]
        [TestCase("script: null or false                ;expect: bool:false")]
        [TestCase("script: true or null                 ;expect: bool:true")]
        [TestCase("script: null or true                 ;expect: bool:true")]
        [TestCase("script: null or null                 ;expect: bool:false")]
        [TestCase("script: not true                     ;expect: bool:false")]
        [TestCase("script: not false                    ;expect: bool:true")]
        [TestCase("script: not null                     ;expect: bool:true")]
        [TestCase("script: Not false                    ;expect: bool:true")]
        [TestCase("script: NOT false                    ;expect: bool:true")]
        [TestCase("script: not not true                 ;expect: bool:true")]
        [TestCase("script: not not false                ;expect: bool:false")]
        [TestCase("script: true and not false           ;expect: bool:true")]
        [TestCase("script: not true and true            ;expect: bool:false")]
        [TestCase("script: false or not false           ;expect: bool:true")]
        [TestCase("script: not false or false           ;expect: bool:true")]
        [TestCase("script: true or true and false       ;expect: bool:true")]
        [TestCase("script: false or true and false      ;expect: bool:false")]
        [TestCase("script: true and false or false      ;expect: bool:false")]
        [TestCase("script: true and false or true       ;expect: bool:true")]
        [TestCase("script: (false or false) and true    ;expect: bool:false")]
        [TestCase("script: (false or true) and true     ;expect: bool:true")]
        [TestCase("script: true and (false or false)    ;expect: bool:false")]
        [TestCase("script: true and (false or true)     ;expect: bool:true")]
        [RunAsDefaultTenant]
        public void Calculations_BooleanLogic(string test)
        {
            TestHelper.Test(test);
        }


        [TestCase("script: convert(DeCiMaL, '123')          				;expect: decimal:123")]
        [TestCase("script: convert(decimal, '-123')          				;expect: decimal:-123")]
        [TestCase("script: convert(decimal, '123.45')          				;expect: decimal:123.45")]
        [TestCase("script: convert(decimal, convert(currency,1.5))          ;expect: decimal:1.5")]
        [TestCase("script: convert(decimal, null)          				    ;expect: decimal:null")]
        [TestCase("script: convert(currency, '-123')          			    ;expect: currency:-123")]
        [TestCase("script: convert(currency, '123.45')          			;expect: currency:123.45")]
        [TestCase("script: convert(currency, convert(currency,1.1))         ;expect: currency:1.1")]
        [TestCase("script: convert(currency, null)                          ;expect: currency:null")]
        [TestCase("script: convert(int, '-123')          					;expect: int:-123")]
        [TestCase("script: convert(int, 123.45)          					;expect: int:123")]
        [TestCase("script: convert(int, convert(currency,1.1))          	;expect: int:1")]
        [TestCase("script: convert(int, null)             	                ;expect: int:null")]
        [TestCase("script: convert(bool, 'True')                            ;expect: bool:true")]
        [TestCase("script: convert(bool, 'False')                           ;expect: bool:false")]
        [TestCase("script: convert(bool, 'true')                            ;expect: bool:true")]
        [TestCase("script: convert(bool, 'false')                           ;expect: bool:false")]
        [TestCase("script: convert(bool, 'TRUE')                            ;expect: bool:true")]
        [TestCase("script: convert(bool, 'FALSE')                           ;expect: bool:false")]
        [TestCase("script: convert(bool, 'Yes')                             ;expect: bool:true")]
        [TestCase("script: convert(bool, 'No')                              ;expect: bool:false")]
        [TestCase("script: convert(bool, 'yes')                             ;expect: bool:true")]
        [TestCase("script: convert(bool, 'no')                              ;expect: bool:false")]
        [TestCase("script: convert(bool, 'YES')                             ;expect: bool:true")]
        [TestCase("script: convert(bool, 'NO')                              ;expect: bool:false")]
        [TestCase("script: convert(bool, 1)                                 ;expect: bool:true")]
        [TestCase("script: convert(bool, 0)                                 ;expect: bool:false")]
        [TestCase("script: convert(bool, 1.1)                               ;expect: bool:true")]
        [TestCase("script: convert(bool, 0.0)                               ;expect: bool:false")]
        [TestCase("script: convert(bool, null)                              ;expect: bool:false")]
        [TestCase("script: convert(date, '2012-12-31')             	        ;expect: date:2012-12-31")]
        [TestCase("script: convert(date, '2012-12-31') + ''          	    ;expect: string:31/12/2012")]
        [TestCase("script: convert(date, null)          	                ;expect: date:null")]
        [TestCase("script: convert(datetime, '2012-12-31T13:30:00')         ;expect: datetime:2012-12-31T13:30:00")]
        [TestCase("script: convert(datetime, '2012-12-31T13:30:00') + ''    ;expect: string:31/12/2012 1:30 PM")]
        [TestCase("script: convert(datetime, null)                          ;expect: datetime:null")]
        [TestCase("script: convert(time, '13:30')                           ;expect: time:13:30:00")]
        [TestCase("script: convert(time, '13:30') + ''                      ;expect: string:1:30 PM")]
        [TestCase("script: convert(time, null)                              ;expect: time:null")]
        [TestCase("script: convert(date, '31/12/2012') = datefromparts(2012,12,31)                                  ;expect: bool:true  ;host:Evaluate")]   // TODO: Need SQL 2012
        [TestCase("script: convert(datetime, '31/12/2012 1:30 PM') = datetimefromparts(2012,12,31,13,30,0)          ;expect: bool:true  ;host:Evaluate")]   // TODO: Need SQL 2012
        [TestCase("script: convert(time, '1:30 PM') = timefromparts(13,30,0)                                        ;expect: bool:true  ;host:Evaluate")]   // TODO: Need SQL 2012
        [TestCase("script: convert(guid, '{05c79dec-af43-4a6c-9b73-04b4ec3d587d}')                                  ;expect: guid:{05c79dec-af43-4a6c-9b73-04b4ec3d587d}")]
        [TestCase("script: convert(guid, '05c79dec-af43-4a6c-9b73-04b4ec3d587d')                                    ;expect: guid:{05c79dec-af43-4a6c-9b73-04b4ec3d587d}")]
        [TestCase("script: convert(guid, null)                                                                      ;expect: guid:null")]
        [RunAsDefaultTenant]
        public void Calculations_ExplicitCasts(string test)
        {
            TestHelper.Test(test);
        }

        [TestCase("script: convert(currency,1.23)                         ;convertto:currency	;expect: currency:1.23")]
        [RunAsDefaultTenant]
        public void Calculations_ImplicitCasts(string test)
        {
            TestHelper.Test(test);
        }        

        [TestCase("script: 2>1 and 4>3                  ;expect: bool:true")]
        [TestCase("script: 7<10 and 'abc'='def'         ;expect: bool:false")]
        [TestCase("script: 7<10 and 'abc'='abc'         ;expect: bool:true")]
        [TestCase("script: null < 2                     ;expect: bool:false")]
        [TestCase("script: 1 < null                     ;expect: bool:false")]
        [TestCase("script: null < null                  ;expect: bool:false")]
        [TestCase("script: 1 < 2                        ;expect: bool:true")]
        [TestCase("script: 2 < 2                        ;expect: bool:false")]
        [TestCase("script: 3 < 2                        ;expect: bool:false")]
        [TestCase("script: 1 <= 2                       ;expect: bool:true")]
        [TestCase("script: 2 <= 2                       ;expect: bool:true")]
        [TestCase("script: 3 <= 2                       ;expect: bool:false")]
        [TestCase("script: 1 > 2                        ;expect: bool:false")]
        [TestCase("script: 2 > 2                        ;expect: bool:false")]
        [TestCase("script: 3 > 2                        ;expect: bool:true")]
        [TestCase("script: 1 >= 2                       ;expect: bool:false")]
        [TestCase("script: 2 >= 2                       ;expect: bool:true")]
        [TestCase("script: 3 >= 2                       ;expect: bool:true")]
        [TestCase("script: 1 = 2                        ;expect: bool:false")]
        [TestCase("script: 2 = 2                        ;expect: bool:true")]
        [TestCase("script: 3 = 2                        ;expect: bool:false")]
        [TestCase("script: 1 <> 2                       ;expect: bool:true")]
        [TestCase("script: 2 <> 2                       ;expect: bool:false")]
        [TestCase("script: 3 <> 2                       ;expect: bool:true")]
        [TestCase("script: 1.1 < 2.2                    ;expect: bool:true")]
        [TestCase("script: 2.2 < 2.2                    ;expect: bool:false")]
        [TestCase("script: 3.3 < 2.2                    ;expect: bool:false")]
        [TestCase("script: 1.1 <= 2.2                   ;expect: bool:true")]
        [TestCase("script: 2.2 <= 2.2                   ;expect: bool:true")]
        [TestCase("script: 3.3 <= 2.2                   ;expect: bool:false")]
        [TestCase("script: 1.1 > 2.2                    ;expect: bool:false")]
        [TestCase("script: 2.2 > 2.2                    ;expect: bool:false")]
        [TestCase("script: 3.3 > 2.2                    ;expect: bool:true")]
        [TestCase("script: 1.1 >= 2.2                   ;expect: bool:false")]
        [TestCase("script: 2.2 >= 2.2                   ;expect: bool:true")]
        [TestCase("script: 3.3 >= 2.2                   ;expect: bool:true")]
        [TestCase("script: 1.1 = 2.2                    ;expect: bool:false")]
        [TestCase("script: 2.2 = 2.2                    ;expect: bool:true")]
        [TestCase("script: 3.3 = 2.2                    ;expect: bool:false")]
        [TestCase("script: 1.1 <> 2.2                   ;expect: bool:true")]
        [TestCase("script: 2.2 <> 2.2                   ;expect: bool:false")]
        [TestCase("script: 3.3 <> 2.2                   ;expect: bool:true")]
        [TestCase("script: convert(currency, 500) >= 1000       ;expect: bool:false")]
        [TestCase("script: convert(int, 500) >= 1000            ;expect: bool:false")]
        [TestCase("script: convert(decimal, 500) >= 1000        ;expect: bool:false")]
        [TestCase("script: convert(currency, 500) >= 1000.1     ;expect: bool:false")]
        [TestCase("script: convert(int, 500) >= 1000.1          ;expect: bool:false")]
        [TestCase("script: convert(decimal, 500) >= 1000.1      ;expect: bool:false")]
        [TestCase("script: convert(decimal, 456) = 456          ;expect: bool:true")]
        [TestCase("script: convert(currency, 456) = 456         ;expect: bool:true")]
        [TestCase("script: convert(currency, 456.12) = 456.12   ;expect: bool:true")]
        [TestCase("script: 'hello' < 'hello world'      ;expect: bool:true")]
        [TestCase("script: 'A' < 'b'                    ;expect: bool:true")]
        [TestCase("script: 'a' < 'B'                    ;expect: bool:true")]
        [TestCase("script: 'a' < 'b'                    ;expect: bool:true")]
        [TestCase("script: 'b' < 'b'                    ;expect: bool:false")]
        [TestCase("script: 'c' < 'b'                    ;expect: bool:false")]
        [TestCase("script: 'a' <= 'b'                   ;expect: bool:true")]
        [TestCase("script: 'b' <= 'b'                   ;expect: bool:true")]
        [TestCase("script: 'c' <= 'b'                   ;expect: bool:false")]
        [TestCase("script: 'a' > 'b'                    ;expect: bool:false")]
        [TestCase("script: 'b' > 'b'                    ;expect: bool:false")]
        [TestCase("script: 'c' > 'b'                    ;expect: bool:true")]
        [TestCase("script: 'A' >= 'b'                   ;expect: bool:false")]
        [TestCase("script: 'a' >= 'B'                   ;expect: bool:false")]
        [TestCase("script: 'a' >= 'b'                   ;expect: bool:false")]
        [TestCase("script: 'b' >= 'b'                   ;expect: bool:true")]
        [TestCase("script: 'c' >= 'b'                   ;expect: bool:true")]
        [TestCase("script: 'a' = 'a'                    ;expect: bool:true")]
        [TestCase("script: 'a' = 'A'                    ;expect: bool:true")]
        [TestCase("script: 'a' = 'b'                    ;expect: bool:false")]
        [TestCase("script: 'b' = 'b'                    ;expect: bool:true")]
        [TestCase("script: 'c' = 'b'                    ;expect: bool:false")]
        [TestCase("script: 'a' <> 'a'                   ;expect: bool:false")]
        [TestCase("script: 'a' <> 'A'                   ;expect: bool:false")]
        [TestCase("script: 'a' <> 'b'                   ;expect: bool:true")]
        [TestCase("script: 'b' <> 'b'                   ;expect: bool:false")]
        [TestCase("script: 'c' <> 'b'                   ;expect: bool:true")]
        [TestCase("script: 'abcde' like 'abcde'         ;expect: bool:true")]
        [TestCase("script: 'abcde' like '%cde'          ;expect: bool:true")]
        [TestCase("script: 'abcde' like '%c%'           ;expect: bool:true")]
        [TestCase("script: 'abcde' like 'ab%'           ;expect: bool:true")]
        [TestCase("script: 'ABCDE' like 'abcde'         ;expect: bool:true")]
        [TestCase("script: 'ABCDE' like 'aBcDe'         ;expect: bool:true")]
        [TestCase("script: 'ABCDE' like '%e'            ;expect: bool:true")]
        [TestCase("script: 'ABCDE' like 'a%'            ;expect: bool:true")]
        [TestCase("script: 'ABCDE' like '%cd%'          ;expect: bool:true")]
        [TestCase("script: 'ABCDE' like null            ;expect: bool:false")]
        [TestCase("script: null like 'abcde'            ;expect: bool:false")]
        [TestCase("script: 'ABCDE' NOT LIKE 'abcde'     ;expect: bool:false")]
        [TestCase("script: 'ABCDE' not like 'abcde'     ;expect: bool:false")]
        [TestCase("script: 'ABCDE' not like 'aBcDe'     ;expect: bool:false")]
        [TestCase("script: 'ABCDE' not like '%e'        ;expect: bool:false")]
        [TestCase("script: 'ABCDE' not like 'a%'        ;expect: bool:false")]
        [TestCase("script: 'ABCDE' not like '%cd%'      ;expect: bool:false")]
        [TestCase("script: 'AB.DE' like 'abcde'         ;expect: bool:false")]
        [TestCase("script: 'ABCD.' like '%e'            ;expect: bool:false")]
        [TestCase("script: '.BCDE' like 'a%'            ;expect: bool:false")]
        [TestCase("script: 'AB.DE' like '%cd%'          ;expect: bool:false")]
        [TestCase("script: 'AB.DE' not like 'abcde'     ;expect: bool:true")]
        [TestCase("script: 'ABCD.' not like '%e'        ;expect: bool:true")]
        [TestCase("script: '.BCDE' not like 'a%'        ;expect: bool:true")]
        [TestCase("script: 'AB.DE' not like '%cd%'      ;expect: bool:true")]
        [TestCase("script: true = true                  ;expect: bool:true")]
        [TestCase("script: true = false                 ;expect: bool:false")]
        [TestCase("script: false = false                ;expect: bool:true")]
        [TestCase("script: true <> true                 ;expect: bool:false")]
        [TestCase("script: true <> false                ;expect: bool:true")]
        [TestCase("script: false <> false               ;expect: bool:false")]
        [TestCase("script: (1>2) = (3>4)                ;expect: bool:true")]
        [TestCase("script: (1>2) <> (3<4)               ;expect: bool:true")]
        [RunAsDefaultTenant]
        public void Calculations_Comparisons(string test)
        {
            TestHelper.Test(test);
        }

        [TestCase("script: -.1                                          ;expect: decimal(1):-0.1")]
        [TestCase("script: 1.234                                        ;expect: decimal(3):1.234")]
        [TestCase("script: 1.0                                          ;expect: decimal(1):1")]
        [TestCase("script: 1.0000                                       ;expect: decimal(4):1")]
        [TestCase("script: Decimal                                      ;context:All Fields:AF 1; expect: decimal(3):100.11")]
        [TestCase("script: Currency                                     ;context:All Fields:AF 1; expect: currency(3):100.10")]
        [TestCase("script: convert(currency, 1.2)                       ;expect: currency(1):1.2")]
        [TestCase("script: convert(decimal, convert(currency, 1.2))     ;expect: decimal(1):1.2")]
        [TestCase("script: 1.1 + 1.1234                                 ;expect: decimal(4):2.2234")]
        [TestCase("script: convert(decimal,'123')                       ;expect: decimal(3):123")]
        [TestCase("script: convert(currency,'123')                      ;expect: currency(2):123")]
        [TestCase("script: convert(decimal,1)+convert(decimal,1)        ;expect: decimal(3):2")]
        [TestCase("script: round(1.2345, 2)                             ;expect: decimal(2):1.23")]   
        [TestCase("script: round(1.2345, 6)                             ;expect: decimal(6):1.234500")]
        [TestCase("script: ''+round(1.2345, 2)                          ;expect: string:1.23            ;host:Evaluate")]   // TODO : Fix SQL - dp formatting
        [TestCase("script: ''+round(1.2345, 6)                          ;expect: string:1.234500        ;host:Evaluate")]   // TODO : Fix SQL - dp formatting
        [TestCase("script: 1/2                                          ;expect: decimal(3):0.5")]
        [TestCase("script: 1.1/2.2                                      ;expect: decimal(3):0.5")]
        [TestCase("script: 1.1111/2.222200                              ;expect: decimal(6):0.5")]
        [TestCase("script: convert(currency, 1)/2                       ;expect: currency(2):0.5")]
        [TestCase("script: convert(currency, 2)*2                       ;expect: currency(2):4")]
        [TestCase("script: 2*convert(currency, 2)                       ;expect: currency(2):4")]
        [TestCase("script: ''+3                                         ;expect: string:3               ;host:Evaluate")]   // TODO : Fix SQL - dp formatting
        [TestCase("script: ''+3.0                                       ;expect: string:3.0             ;host:Evaluate")]   // TODO : Fix SQL - dp formatting
        [TestCase("script: ''+(3.1+2.9)                                 ;expect: string:6.0             ;host:Evaluate")]   // TODO : Fix SQL - dp formatting
        [TestCase("script: ''+convert(decimal,6)                        ;expect: string:6.000           ;host:Evaluate")]   // TODO : Fix SQL - dp formatting
        [TestCase("script: ''+convert(currency,6)                       ;expect: string:6.00            ;host:Evaluate")]   // TODO : Fix SQL - dp formatting
        [TestCase("script: ''+convert(decimal,6000)                     ;expect: string:6,000.000       ;host:Evaluate")]   // TODO : Fix SQL - dp formatting
        [TestCase("script: ''+convert(currency,6000)                    ;expect: string:6,000.00        ;host:Evaluate")]   // TODO : Fix SQL - dp formatting
        [TestCase("script: ''+6000                                      ;expect: string:6000            ;host:Evaluate")]   // TODO : Fix SQL - dp formatting      // Ints get formatted without comma's - for the moment, because often used as ID numbers
        [RunAsDefaultTenant]
        public void Calculations_DecimalPlaces(string test)
        {
            TestHelper.Test(test);
        }

        //[TestCase("script:  Age				;context:AA_Employee:Peter Aylett	;expect: int:9999")]
        //[TestCase("script:  Manager.Age 		;context:AA_Employee:Peter Aylett	;expect: int:40")]
        //[TestCase("script:  Age-Manager.Age		;context:AA_Employee:Peter Aylett	;expect: int:9959")]
        //[TestCase("script:  Manager.Age-Age		;context:AA_Employee:Peter Aylett	;expect: int:-9959")]
        //[TestCase("script:  Activity.Name		;context:AA_Employee:Peter Aylett	;expect: string list")]
        ////[TestCase("script:  convert(AA_Manager,context()).[Direct Reports]		;context:AA_Employee:Peter Aylett	;expect: AA_Employee list:Kun Dai, Anurag Sharma, Peter Choi, David Quint, Con Cristou, Sri Korada;unsorted")] //Bug 17437
        ////[TestCase("script:  convert(AA_Manager,context()).[Direct Reports] order by Name	;context:AA_Employee:Peter Aylett	;expect: AA_Employee list:Anurag Sharma, Con Cristou, David Quint, Kun Dai, Peter Choi,Sri Korada)] //Bug 17437
        ////[TestCase("script:  convert(aa_manager,context()).[Direct Reports] order by Age 			;context:AA_Employee:Peter Aylett	;expect: Employee list:David Quint,Peter Choi, Anurag Sharma, Con Cristou, Sri Korada, Kun Dai")] //Bug 17437
        ////[TestCase("script:	convert(AA_Manager,context()).[Direct Reports] where Name='Karen Jones' ;context:AA_Employee:Peter Aylett	;expect: AA_Employee list:Null")]  //Bug 17437
        ////[TestCase("script:	convert(AA_Manager,context()).[Direct Reports] where Name='Kun Dai' ;context:AA_Employee:Peter Aylett	;expect: AA_Employee list:Kun Dai")]  //Bug 17437
        //[TestCase("script: iif(Age<30,'Below 30',iif(Age <60,'Below 60',iif(Age <90,'Below 90','Greater 90')))		;context:AA_Employee:Peter Aylett	;expect:string:Greater 90")]
        //[TestCase("script: IsNull([Manager],'No Manager') 		;context:AA_Employee:Peter Aylett			;expect:string:Jude Jacobs")]
        //[TestCase("script: Name = 'Peter Aylett'			;context:AA_Employee:Peter Aylett			;expect:bool:true")]
        //[TestCase("script: Name = 'Peter'				;context:AA_Employee:Peter Aylett			;expect:bool:false")]
        //[TestCase("script: Name like 'Pe%'				;context:AA_Employee:Peter Aylett			;expect:bool:true")]
        //[TestCase("script: Name not like '%Fred%'			;context:AA_Employee:Peter Aylett			;expect:bool:true")]
        //[TestCase("script: Name not like '%Aylett'			;context:AA_Employee:Peter Aylett			;expect:bool:false")]
        //[TestCase("script: Name like '%ay%'				;context:AA_Employee:Peter Aylett			;expect:bool:true")]
        //[TestCase("script: iif(Name not like '%Aylett',Name,'Other')	;context:AA_Employee:Peter Aylett			;expect:string:Other")]
        ////[TestCase("script: TestAuthoriser				;context:AA_Employee:Peter Aylett			;expect:bool:false")]
        ////[TestCase("script: iif(not TestAuthoriser,'Yes','No')		;context:AA_Employee:Peter Aylett			;expect:string:Yes")]
        ////[TestCase("script: iif(Not TestAuthoriser,'Yes','No')		;context:AA_Employee:Peter Aylett			;expect:string:Yes")]
        //[TestCase("script: len(Name)					;context:AA_Employee:Peter Aylett			;expect:int:12")]
        //[TestCase("script: replace(Name, 'Pe', 'La')			;context:AA_Employee:Peter Aylett			;expect:string:Later Aylett")]
        //[TestCase("script: charindex('et', Name)			;context:AA_Employee:Peter Aylett			;expect:int:2")]
        //[TestCase("script: charindex('aa', Name)			;context:AA_Employee:Peter Aylett			;expect:int:0")]
        //[TestCase("script: left(Name,3)					;context:AA_Employee:Peter Aylett			;expect:string:Pet")]
        //[TestCase("script: right(Name,4)				;context:AA_Employee:Peter Aylett			;expect:string:lett")]
        //[TestCase("script: Name						;context:AA_Employee:Peter Aylett			;expect:string:Peter Aylett")]
        //[TestCase("script: Manager					;context:AA_Employee:Peter Aylett			;expect:AA_Manager:Jude Jacobs")]
        //[TestCase("script: Name + Manager				;context:AA_Employee:Peter Aylett			;expect:string:Peter AylettJude Jacobs")]
        //[TestCase("script: Name + ', Manager is ' + Manager		;   context:AA_Employee:Peter Aylett			;expect:string:Peter Aylett, Manager is Jude Jacobs")]
        //[TestCase("script: tolower(Name)				;context:AA_Employee:Peter Aylett			;expect:string:peter aylett")]
        //[TestCase("script: toupper(Name)				;context:AA_Employee:Peter Aylett			;expect:string:PETER AYLETT")]
        //[TestCase("script: Substring(Name,7,3)				;context:AA_Employee:Peter Aylett			;expect:string:Ayl")]
        //[TestCase("script: Count([Direct Reports])			;context:AA_Manager:Peter Aylett			;expect:int:6")]
        //[TestCase("script: Count(Activity)				;context:AA_Manager:Peter Aylett			;expect:int:0")]
        //[TestCase("script: any([Direct Reports].Age>20)			;context:AA_Manager:Peter Aylett			;expect:bool:true; host:evaluate")]
        //[TestCase("script: every([Direct Reports].Age>20)		;context:AA_Manager:Peter Aylett			;expect:bool:true; host:evaluate")]
        //[TestCase("script: Sum([Direct Reports].Age)			;context:AA_Manager:Peter Aylett			;expect:int:268")]
        //[TestCase("script: avg([Direct Reports].Age)			;context:AA_Manager:Peter Aylett			;expect:decimal(3):33.5")]
        ////[TestCase("script: stdev([Direct Reports].Age)			;context:AA_Manager:Peter Aylett			;expect:decimal(3):15.955")]
        //[TestCase("script: any([Activity].Status='Completed')		;context:AA_Manager:Peter Aylett			;expect:bool:false; host:evaluate")]
        //[TestCase("script: every([Activity].Status='Completed')		;context:AA_Manager:Peter Aylett			;expect:bool:true; host:evaluate")]
        //[RunAsDefaultTenant]
        //public void Calculations_NinosTests(string test)
        //{
        //    TestHelper.Test(test);
        //}

        // Test join over single instance of various data types
        [TestCase("script: join('')          				;host:evaluate ;expect: string:")]
        [TestCase("script: join('Hello')          			;host:evaluate ;expect: string:Hello")]
        [TestCase("script: join(123)          				;host:evaluate ;expect: string:123")]
        [TestCase("script: join(1.5)          				;host:evaluate ;expect: string:1.5")]
        [TestCase("script: join(true)          				;host:evaluate ;expect: string:Yes")]
        [TestCase("script: join(#2012-3-1#)       			;host:evaluate ;expect: string:1/03/2012")]
        [TestCase("script: join(#9:34:45#)       			;host:evaluate ;expect: string:9:34 AM")]
        [TestCase("script: join(#31/3/12 1:34 PM#)       	;host:evaluate ;expect: string:31/03/2012 1:34 PM")]
        [TestCase("script: join(null)          				;host:evaluate ;expect: string:null")]
        [RunAsDefaultTenant]
        public void Calculations_Joins(string test)
        {
            TestHelper.Test(test);
        }

    }

}
