<#@ template language="C#" #>
<#@ output extension="cs" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EDC.ReadiNow.CodeGen.Extensions" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:<#=Environment.Version.ToString(3)#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     Copyright 2011-2016 Global Software Innovation Pty Ltd
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;

using EDC.ReadiNow.Model.Internal;

namespace <#= Model.Namespace #>
{
<#
	/////
	// Loop through all the types and generate a class for each.
	/////
    foreach ( EDC.ReadiNow.Common.ConfigParser.Containers.Entity entity in Model.GetTypes( ) )
    {
		if (!Model.GenerateCode( entity ))
			continue;
    	string typeDisplayName = Model.GetTypeDisplayName( entity );
#>
	/// <summary>
	/// <#= Model.GetEntityDescription( entity ) #>
	/// </summary>
	[Serializable]
	[DebuggerStepThrough]
	[ModelClass("<#= entity.Alias.Namespace #>:<#= entity.Alias.Value #>")]
	public class <#= typeDisplayName #> : StrongEntity
	{
		/// <summary>
		/// Public constructor.
		/// </summary>
		public <#= typeDisplayName #>( )
			: base( typeof( <#= typeDisplayName #> ))
		{

		}

		/// <summary>
		/// Internal constructor.
		/// </summary>
		internal <#= typeDisplayName #>( IActivationData activationData )
			: base( activationData )
		{

		}

<#
		////////////////////////////////////////////////////////////////////////////////////////////////
		/// START: Static Member References
		///   - Static fields
		///   - Static relationships
		///   - All Fields
		////////////////////////////////////////////////////////////////////////////////////////////////

		if ( Model.GetEntityAllFields( entity ).Any( ) || Model.GetEntityAllRelationships( entity ).Any( ) )
		{
#>
		#region <#= typeDisplayName #> Public Fields

<#
		/////
		// Loop through all the fields that apply to this class and generate public static accessors.
		/////
	    foreach ( EDC.ReadiNow.Templates.FieldData field in Model.GetEntityAllFields( entity ) )
	    {
#>
		/// <summary>
		/// Public static accessor to the <#= field.InheritedText #>field.
		/// </summary>
		public static <#= Model.GetEntityTypeDisplayName( field.FieldEntity ) #> <#= field.Name #>_Field
		{
			get
			{
<#			if (field.IsInherited) { #>
				return <#= Model.Namespace #>.<#= Model.GetTypeDisplayName( field.DeclaringType ) #>.<#= field.Name #>_Field;
<#			} else { #>
				return EDC.ReadiNow.Model.Entity.GetFieldEntity<<#= Model.GetEntityTypeDisplayName( field.FieldEntity ) #>>( "<#= field.NsAlias #>" );
<#			} #>
			}
		}

<#
		}
#>
<#
		/////
		// Loop through all the relationships from this classes base classes and generate a public static accessor.
		/////
	    foreach ( EDC.ReadiNow.Templates.RelationshipData relationship in Model.GetEntityAllRelationships( entity ) )
	    {
			if (!Model.GenerateCode( relationship.RelationshipEntity ))
				continue;

#>
		/// <summary>
		/// Public static accessor to the <#= relationship.InheritedText #> <#= relationship.DirectionText #> relationship.
		/// </summary>
		public static IEntity <#= relationship.Name #>_Field
		{
			get
			{
<#			if (relationship.IsInherited) { #>
				return <#= Model.Namespace #>.<#= relationship.SourceName #>.<#= relationship.Name #>_Field;
<#			} else { #>
				return EDC.ReadiNow.Model.Entity.GetFieldEntity<Entity>( "<#= relationship.RelationshipEntity.Alias.NsAlias #>" );
<#			} #>
			}
		}

<#
		} //foreach

#>
		/// <summary>
		/// Public static accessor to the array of all fields registered against this type.
		/// </summary>
		public static IEntity [ ] AllFields
		{
			get
			{
				return new IEntity [ ] { <#= string.Join( ", ", Model.GetDeclaredFields( entity ).Select( declaredField => typeDisplayName + "." + Model.GetTypeDisplayName( declaredField ) + "_Field" ).Union( Model.GetEntityAllRelationships( entity ) .Where( r => Model.GenerateCode(r.RelationshipEntity) ) .Select( r => typeDisplayName + "." + r.Name + "_Field" ) ).ToArray( ) ) #> };
			}
		}

		#endregion <#= typeDisplayName #> Public Fields

<#
		}
		////////////////////////////////////////////////////////////////////////////////////////////////
		/// END: Static Member References
		////////////////////////////////////////////////////////////////////////////////////////////////
#>
<#
		////////////////////////////////////////////////////////////////////////////////////////////////
		/// START: Instance Members
		////////////////////////////////////////////////////////////////////////////////////////////////

		if ( Model.GetEntityAllFields( entity ).Any( ) || Model.GetEntityAllRelationships( entity ).Any( ) )
		{
#>
		#region <#= typeDisplayName #> Public Properties

<#
		/////
		// Loop through all the fields for this class and generate a public get/set property.
		/////
	    foreach ( EDC.ReadiNow.Templates.FieldData field in Model.GetEntityAllFields( entity ) )
	    {
#>
		/// <summary>
		/// Public accessor for the <#= field.InheritedText #>field.
		/// </summary>
		public <#= field.FieldType #> <#= field.Name #>
		{
			get
			{
				return ( <#= field.FieldType #> ) this.GetField( "<#= field.NsAlias #>" );
			}
<#
			/////
			// If the field is read-only, omit the setter.
			/////
			if ( !Model.IsFieldReadOnly( field.FieldEntity ) )
			{
#>
			set
			{
				this.SetField( "<#= field.NsAlias #>", value);
			}
<#
			} //if readonly
#>
		}
<#
		} // foreach field
#>

<#
		/////
		// START: Relationship members
		// Loop through all the relationships for this class and generate a public get/set property.
		/////
    	foreach ( EDC.ReadiNow.Templates.RelationshipData rel in Model.GetEntityAllRelationships( entity ) )
    	{
			if (!Model.GenerateCode( rel.RelationshipEntity ))
				continue;
				
			string relName = rel.Name;
			if (relName == typeDisplayName)
			{
				relName += "Instance";
			}
			
			// START: Relationship accessor
#>
		/// <summary>
		/// Public accessor for the <#= rel.InheritedText #><#= rel.DirectionText #> relationship.
		/// </summary>
<#
			if ( rel.IsCollection )
			{
#>
		public IEntityCollection<<#= rel.TargetName #>> <#= relName #>
<#
			}
			else
			{
#>
		public <#= rel.TargetName #> <#= relName #>
<#
			}
#>
		{
			get
			{
<#
				if ( rel.IsCollection )
				{
#>
				return this.GetRelationships<<#= rel.TargetName #>>( "<#= rel.NsAlias #>", <#= rel.DirectionEnum #> ).Entities;
<#
				}
				else
				{
#>
				return this.GetLookup<<#= rel.TargetName #>>( "<#= rel.NsAlias #>", <#= rel.DirectionEnum #> );
<#
				}
#>
			}
			set
			{
<#
				if ( rel.IsCollection )
				{
#>
				this.SetRelationships<<#= rel.TargetName #>>( "<#= rel.NsAlias #>", value, <#= rel.DirectionEnum #> );
<#
				}
				else
				{
#>
				this.SetLookup<<#= rel.TargetName #>>( "<#= rel.NsAlias #>", value, <#= rel.DirectionEnum #> );
<#
				}
#>
			}
		}
<#
			// END: Relationship accessor

			// START: Relationship enum accessor
			if ( !rel.IsReverse && Model.IsEnumerationType( rel.TargetTypeEntity ) )
			{
#>
		/// <summary>
		/// Public accessor for the enumeration value.
		/// </summary>
		public <#= rel.TargetName #>_Enumeration? <#= rel.Name #>_Enum
		{
			get
			{
<#
			if ( rel.IsCollection )
			{
#>
				return GetMultiEnum<<#= rel.TargetName #>, <#= rel.TargetName #>_Enumeration>( "<#= rel.NsAlias #>", <#= rel.DirectionEnum #>, <#= rel.TargetName #>.ConvertAliasToEnum, (enum1, enum2) => enum1 | enum2 );
<#
			}
			else
			{
#>
				return GetEnum<<#= rel.TargetName #>, <#= rel.TargetName #>_Enumeration>( "<#= rel.NsAlias #>", <#= rel.DirectionEnum #>, <#= rel.TargetName #>.ConvertAliasToEnum );
<#
			}
#>
			}
			set
			{
				if ( value == null )
				{
					this.SetRelationships( "<#= rel.NsAlias #>", null, Direction.Forward );
					return;
				}
<#
			if ( rel.IsCollection )
			{
#>
				var relationships = new List<<#= rel.TargetName #>>( );

				foreach ( <#= rel.TargetName #>_Enumeration enumValue in <#= rel.TargetName #>.GetEnumValues( value.Value ) )
				{
				    relationships.Add( EDC.ReadiNow.Model.Entity.Get<<#= rel.TargetName #>>( EntityRefHelper.ConvertAliasWithNamespace( <#= rel.TargetName #>.ConvertEnumToAlias( enumValue ) ) ) );
				}

				this.SetRelationships( "<#= rel.NsAlias #>", new EntityRelationshipCollection<<#= rel.TargetName #>>( relationships ), Direction.Forward );
<#
			}
			else
			{
#>
				this.SetRelationships( "<#= rel.NsAlias #>", new EntityRelationship<<#= rel.TargetName #>>( EDC.ReadiNow.Model.Entity.Get<<#= rel.TargetName #>>( EntityRefHelper.ConvertAliasWithNamespace( <#= rel.TargetName #>.ConvertEnumToAlias( value.Value ) ) ) ).ToEntityRelationshipCollection( ), Direction.Forward );
<#
			}
#>
			}
		}		
<#
				
			} // if enum
			// END: Relationship enum accessor
			
    	} // foreach rel
		// END: Relationship members
#>



		#endregion <#= typeDisplayName #> Public Properties

<#
		} //if instance members
		
		////////////////////////////////////////////////////////////////////////////////////////////////
		/// END: Instance Members
		////////////////////////////////////////////////////////////////////////////////////////////////
#>
<#
		if ( Model.GetDescendants( entity ).Any( ) )
		{
#>
		#region Type casting

<#
		/////
		// Loop through this classes derived classes and generate an explicit cast operator.
		/////
		foreach ( EDC.ReadiNow.Common.ConfigParser.Containers.Entity type in Model.GetDescendants( entity ) )
    	{
    		if (!Model.GenerateCode( type ))
    			continue;
#>
		/// <summary>
		/// Explicit cast from the specified type to the current type.
		/// </summary>
		public static explicit operator <#= typeDisplayName #>( <#= Model.GetTypeDisplayName( type ) #> entity )
		{
			return entity.Cast<<#= typeDisplayName #>>( );
		}

<#
		}
#>
		#endregion Type casting

<#
		}
#>
		#region Additional Static Content

		/// <summary>
        /// Returns all instances of the <#= typeDisplayName #> type
        /// </summary>
        /// <returns>An enumeration of instances of this type.</returns>
        public static EntityType <#= typeDisplayName #>_Type
		{
			get
			{
				return EDC.ReadiNow.Model.Entity.Get<EntityType>("<#= entity.Alias.Namespace + ":" + entity.Alias.Value #>");
			}
		}
		
		#endregion Additional Static Content

<#
		string enumTypeName = null;
		EnumValueInfo[] enumValues = null;
		if ( Model.IsEnumerationType( entity ) )
		{
			enumTypeName = typeDisplayName + "_Enumeration";
			enumValues = Model.GetEnumValues( entity );
#>
		#region Static Enum Converters
		/// <summary>
		/// Converts an enumValue alias to a <#= enumTypeName #> value.
		/// </summary>
		public static <#= enumTypeName #>? ConvertAliasToEnum(string nsAlias)
		{
			switch (nsAlias)
			{
<#
	foreach ( EnumValueInfo enumValue in enumValues )
	{
#>
				case "<#= enumValue.Alias#>": return <#= enumTypeName + "." + enumValue.EnumValueName #>;
<#
	}
#>
				default: return null;
			}
		}
	
		/// <summary>
		/// Converts a <#= enumTypeName #> to its alias string.
		/// </summary>
		public static string ConvertEnumToAlias(<#= enumTypeName #> value)
		{
			switch (value)
			{
<#
	foreach ( EnumValueInfo enumValue in enumValues )
	{
#>
				case <#= enumTypeName + "." + enumValue.EnumValueName #>: return "<#= enumValue.Alias#>";
<#
	}
#>
				default: return null;
			}
		}

		/// <summary>
		/// Gets the individual values that comprise the enumeration.
		/// </summary>
		public static IEnumerable<<#= enumTypeName #>> GetEnumValues( <#= enumTypeName #> value )
		{
			foreach ( object o in Enum.GetValues( typeof( <#= enumTypeName #> ) ) )
			{
				if ( ( ( int ) o & ( int ) ( object ) value ) != 0 )
				{
					yield return ( <#= enumTypeName #> ) o;
				}
			}
		}
		#endregion

<#
		}
#>
	}

<#
		if ( Model.IsEnumerationType( entity ) )
		{
#>
	/// <summary>
	/// <#= typeDisplayName #> enumeration type.
	/// </summary>
	public enum <#= enumTypeName #> : ulong
	{
<#
	ulong index = 1;
	foreach ( EnumValueInfo enumValue in enumValues )
	{
#>
		/// <summary>
		/// 
		/// </summary>
		<#= enumValue.EnumValueName #> = <#= index #>,

<#
		index = index << 1;
	}
#>
	}

<#
		}

	}	// foreach class
#>
}