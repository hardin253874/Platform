<?xml version="1.0" encoding="utf-8"?>
<resources xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="core" xsi:schemaLocation=". ../Core.xsd" defaultSolution="coreSolution">
  <!--Copyright 2011-2016 Global Software Innovation Pty Ltd-->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!--    RELATIONSHIPS                                                 -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- 'Relationship type' type -->
  <type>
    <name>Relationship</name>
    <description>The 'Relationship' definition type</description>
    <alias>relationship</alias>
    <isMetadata>true</isMetadata>
    <inherits>schema, protectableType</inherits>
    <fieldGroups>
      <fieldGroup>
        <name>Relationship Details</name>
        <alias>relationshipDetails</alias>
      </fieldGroup>
    </fieldGroups>
    <fields>
      <aliasField>
        <name>Reverse alias</name>
        <alias>reverseAlias</alias>
        <aliasMarkerId>1</aliasMarkerId>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </aliasField>
      <boolField>
        <name>Cascade delete</name>
        <alias>cascadeDelete</alias>
        <description>If enabled, the 'from' resource of a relationship gets deleted if the 'to' resource is deleted.</description>
        <defaultValue>false</defaultValue>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
      <boolField>
        <name>Cascade delete 'target'</name>
        <alias>cascadeDeleteTo</alias>
        <description>If enabled, the 'to' resource of a relationship gets deleted if the 'from' resource is deleted.</description>
        <defaultValue>false</defaultValue>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
      <boolField>
        <name>Warn on delete to</name>
        <alias>warnOnDeleteTo</alias>
        <defaultValue>false</defaultValue>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
      <boolField>
        <name>Hide on to-type</name>
        <alias>hideOnToType</alias>
        <description>Indicates that by default this relationship should not be shown on the target ('to') resource.</description>
        <defaultValue>false</defaultValue>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
      <boolField>
        <name>Hide on to-type default form</name>
        <alias>hideOnToTypeDefaultForm</alias>
        <description>Indicates that by default this relationship should not be shown on the target ('to') resource default form.</description>
        <defaultValue>false</defaultValue>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
      <boolField>
        <name>Hide on from-type</name>
        <alias>hideOnFromType</alias>
        <description>Indicates that by default this relationship should not be shown on the source ('from') resource.</description>
        <defaultValue>false</defaultValue>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
      <boolField>
        <name>Hide on from-type default form</name>
        <alias>hideOnFromTypeDefaultForm</alias>
        <description>Indicates that by default this relationship should not be shown on the source ('from') resource default form.</description>
        <defaultValue>false</defaultValue>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
      <stringField>
        <alias>fromName</alias>
        <name>From name</name>
        <maxLength>200</maxLength>
        <pattern>namePattern</pattern>
        <description>A more descriptive name for the source (relative to the target). For example, a 'Person administers Mail Server' relationship, might want to show the source as 'System Administrator', rather than just 'Person'.</description>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </stringField>
      <stringField>
        <alias>toName</alias>
        <name>To name</name>
        <maxLength>200</maxLength>
        <pattern>namePattern</pattern>
        <description>A more descriptive name for the target (relative to the source). For example, a 'Person administers Mail Server' relationship, might want to show the target as 'Administered Mail Servers', rather than just 'Computer'.</description>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </stringField>
      <stringField>
        <alias>fromScriptName</alias>
        <name>From script name</name>
        <maxLength>200</maxLength>
        <pattern>scriptNamePattern</pattern>
        <description>The name to use when referring to this relationship in a reverse direction in scripts.</description>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </stringField>
      <stringField>
        <alias>toScriptName</alias>
        <name>To script name</name>
        <maxLength>200</maxLength>
        <pattern>scriptNamePattern</pattern>
        <description>The name to use when referring to this relationship in a forward direction in scripts.</description>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </stringField>
      <boolField>
        <alias>defaultFromUseCurrent</alias>
        <name>Default from use current</name>
        <description>Indicates that by default this relationship should use the logged in Account/Person as the source ('from') resource.</description>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
      <boolField>
        <alias>defaultToUseCurrent</alias>
        <name>Default to use current</name>
        <description>Indicates that by default this relationship should use the logged in Account/Person as the target ('to') resource.</description>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
      <boolField>
        <alias>relationshipIsMandatory</alias>
        <name>Mandatory</name>
        <defaultValue>false</defaultValue>
        <description>Indicates that a relationship is mandatory in the forward direction.</description>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
      <boolField>
        <alias>revRelationshipIsMandatory</alias>
        <name>Mandatory (rev)</name>
        <defaultValue>false</defaultValue>
        <description>Indicates that a relationship is mandatory in the reverse direction.</description>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
      <boolField>
        <alias>implicitInSolution</alias>
        <name>Implicit in solution</name>
        <description>Implicitly includes the to resource in the same solution as the from resource when no explicit inSolution relationship is defined on the to resource.</description>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
      <boolField>
        <alias>reverseImplicitInSolution</alias>
        <name>Reverse implicit in solution</name>
        <description>Implicitly includes the from resource in the same solution as the to resource when no explicit inSolution relationship is defined on the from resource.</description>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
      <boolField>
        <name>Is readonly</name>
        <alias>isRelationshipReadOnly</alias>
        <defaultValue>false</defaultValue>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
      <boolField>
        <name>Exclude from publish</name>
        <alias>excludeFromPublish</alias>
        <defaultValue>false</defaultValue>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
      <boolField>
        <name>Secures 'to' type</name>
        <alias>securesTo</alias>
        <defaultValue>false</defaultValue>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
      <boolField>
        <name>Secures 'from' type</name>
        <alias>securesFrom</alias>
        <defaultValue>false</defaultValue>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
      <boolField>
        <!-- If set, then this scopes the secureTo down to only apply to reads. securesTo must also be set for this to apply. -->
        <name>Secures 'to' type for reads only</name>
        <alias>securesToReadOnly</alias>
        <defaultValue>false</defaultValue>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
      <boolField>
        <!-- If set, then this scopes the secureFrom down to only apply to reads. securesFrom must also be set for this to apply. -->
        <name>Secures 'from' type for reads only</name>
        <alias>securesFromReadOnly</alias>
        <defaultValue>false</defaultValue>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
      <boolField>
        <name>Show help text</name>
        <alias>showRelationshipHelpText</alias>
        <description>Specify show the help text for relationship.</description>
        <defaultValue>false</defaultValue>
        <fieldInGroup>relationshipDetails</fieldInGroup>
      </boolField>
    </fields>
    <generateCode>true</generateCode>
  </type>
  <!-- The relationship 'from type' relationship definition -->
  <!-- Indicates what resource type a relationship is from -->
  <!-- Also represents the 'relationships' relationship from a type -->
  <relationship>
    <name>From type</name>
    <alias>fromType</alias>
    <reverseAlias>relationships</reverseAlias>
    <relType>relComponentOf</relType>
    <fromType>relationship</fromType>
    <fromName>Relationships (source)</fromName>
    <toType>type</toType>
    <generateCode>true</generateCode>
    <relationshipInFromTypeGroup>relationshipDetails</relationshipInFromTypeGroup>
    <relationshipInToTypeGroup>typeDetails</relationshipInToTypeGroup>
  </relationship>
  <!-- The relationship 'from type default value' relationship definition -->
  <!-- Indicates what resource type a relationship is from -->
  <!-- Also represents the 'relationships' relationship from a type -->
  <relationship>
    <name>From type default value</name>
    <alias>fromTypeDefaultValue</alias>
    <relType>relLookup</relType>
    <fromType>relationship</fromType>
    <toType>resource</toType>
    <generateCode>true</generateCode>
    <hideOnToType>true</hideOnToType>
    <hideOnFromType>true</hideOnFromType>
  </relationship>
  <!-- The relationship 'to type' relationship definition -->
  <!-- Indicates what resource type a relationship is to -->
  <relationship>
    <name>To type</name>
    <alias>toType</alias>
    <reverseAlias>reverseRelationships</reverseAlias>
    <relType>relComponentOf</relType>
    <fromType>relationship</fromType>
    <fromName>Relationships (target)</fromName>
    <toType>type</toType>
    <generateCode>true</generateCode>
    <relationshipInToTypeGroup>typeDetails</relationshipInToTypeGroup>
    <relationshipInFromTypeGroup>relationshipDetails</relationshipInFromTypeGroup>
  </relationship>
  <relationship>
    <name>To type default value</name>
    <alias>toTypeDefaultValue</alias>
    <relType>relLookup</relType>
    <fromType>relationship</fromType>
    <toType>resource</toType>
    <generateCode>true</generateCode>
    <hideOnToType>true</hideOnToType>
    <hideOnFromType>true</hideOnFromType>
  </relationship>
  <!-- RelType Enumeration type -->
  <enumType>
    <alias>relTypeEnum</alias>
    <name>Relationship Type</name>
    <inherits>enumValue</inherits>
    <isMetadata>true</isMetadata>
    <enumValues>
      <!-- Lookup -->
      <relTypeEnum>
        <alias>relLookup</alias>
        <name>Lookup</name>
        <description>Many-to-one. Points to a single resource, non-exclusively. Neither end affects the life-cycle of the other. This is equivalent to 'exclusive collection' in the opposite direction.</description>
      </relTypeEnum>
      <!-- Dependant Of -->
      <relTypeEnum>
        <alias>relDependantOf</alias>
        <name>Dependant of</name>
        <description>Many-to-one. The 'from' relies on the 'to' resource, but is not actually part of it. The 'from' resource is deleted with the 'to' resource, but it does not get cloned or deployed with it. This is equivalent to 'dependants' in the opposite direction.</description>
      </relTypeEnum>
      <!-- Component Of -->
      <relTypeEnum>
        <alias>relComponentOf</alias>
        <name>Component of</name>
        <description>Many-to-one. The 'from' resource belongs to the 'to' resource. The 'from' resource is cloned, deleted, and deployed with the 'to' resource. This is equivalent to 'components' in the opposite direction.</description>
      </relTypeEnum>
      <!-- Choice Field -->
      <relTypeEnum>
        <alias>relChoiceField</alias>
        <name>Choice Field</name>
        <description>Many-to-one. This relationship represents a single-value choice field. This has no equivalent reverse relationship type: choice fields should always be defined in this direction.</description>
      </relTypeEnum>
      <!-- Single Lookup -->
      <relTypeEnum>
        <alias>relSingleLookup</alias>
        <name>Single Lookup</name>
        <description>One-to-one. Points to a single resource, exclusively. However, neither end affects the life-cycle of the other. This behaves as a 'single lookup' in either direction.</description>
      </relTypeEnum>
      <!-- Single Component Of -->
      <relTypeEnum>
        <alias>relSingleComponentOf</alias>
        <name>Single component of</name>
        <description>One-to-one. The 'from' resource belongs to the 'to' resource. The 'from' resource is cloned, deleted, and deployed with the 'to' resource. This is equivalent to 'single component' in the opposite direction.</description>
      </relTypeEnum>
      <!-- Single Component -->
      <relTypeEnum>
        <alias>relSingleComponent</alias>
        <name>Has single component</name>
        <description>One-to-one. The 'from' resource owns the single 'to' resource. The 'to' resource is cloned, deleted, and deployed with the 'from' resource. This is equivalent to 'single component of' in the opposite direction.</description>
      </relTypeEnum>
      <!-- Collection -->
      <relTypeEnum>
        <alias>relExclusiveCollection</alias>
        <name>Collection</name>
        <description>One-to-many. The 'from' exclusively points to multiple 'to' resources. However, neither end affects the life-cycle of the other. This behaves as a 'lookup' in either direction.</description>
      </relTypeEnum>
      <!-- Components -->
      <relTypeEnum>
        <alias>relDependants</alias>
        <name>Dependants</name>
        <description>One-to-many. The 'from' resource is exclusively relied on by multiple 'to' resources. The 'to' resources are deleted with the 'from' resource, but they are not cloned or deployed with it. This is equivalent to 'dependant of' in the opposite direction.</description>
      </relTypeEnum>
      <!-- Components -->
      <relTypeEnum>
        <alias>relComponents</alias>
        <name>Components</name>
        <description>One-to-many. The 'from' resource exclusively owns multiple 'to' resources. The 'to' resources are cloned, deleted, and deployed with the 'from' resource. This is equivalent to 'component of' in the opposite direction.</description>
      </relTypeEnum>
      <!-- Many-to-many -->
      <relTypeEnum>
        <alias>relManyToMany</alias>
        <name>Many to many</name>
        <description>Many-to-many. The 'from' non-exclusively points to multiple 'to' resources. However, neither end affects the life-cycle of the other. This behaves as a 'many-to-many' in either direction.</description>
      </relTypeEnum>
      <!-- Multi-Choice Field -->
      <relTypeEnum>
        <alias>relMultiChoiceField</alias>
        <name>Multi-choice field</name>
        <description>Many-to-many. This relationship represents a multi-value choice field. This has no equivalent reverse relationship type: multi choice fields should always be defined in this direction.</description>
      </relTypeEnum>
      <!-- Shared dependants of -->
      <relTypeEnum>
        <alias>relSharedDependantsOf</alias>
        <name>Shared dependants of</name>
        <description>Many-to-many. The 'from' non-exclusively points to one or more 'to' resources. If the last 'to' resource is deleted, then so is the 'from' resource. This is equivalent to 'at least one from' in the opposite direction.</description>
      </relTypeEnum>
      <!-- Shared dependants -->
      <relTypeEnum>
        <alias>relSharedDependants</alias>
        <name>Shared dependants</name>
        <description>Many-to-many. The 'to' non-exclusively points to one or more 'from' resources. If the last 'from' resource is deleted, then so is the 'to' resource. This is equivalent to 'at least one to' in the opposite direction.</description>
      </relTypeEnum>
      <!-- Many to many forward -->
      <relTypeEnum>
        <alias>relManyToManyFwd</alias>
        <name>Many to many (forward)</name>
        <description>A many-to-many relationship that belongs to the 'from' entity only. Neither entity owns or deletes the other. But the reference is only cloned if the 'from' entity is cloned.</description>
      </relTypeEnum>
      <!-- Many to many reverse -->
      <relTypeEnum>
        <alias>relManyToManyRev</alias>
        <name>Many to many (reverse)</name>
        <description>A many-to-many relationship that belongs to the 'from' entity only. Neither entity owns or deletes the other. But the reference is only cloned if the 'from' entity is cloned.</description>
      </relTypeEnum>
      <!-- Custom -->
      <relTypeEnum>
        <alias>relCustom</alias>
        <name>Custom</name>
        <description>This relationship has been configured with custom settings. Intended for internal use, not customer use. </description>
      </relTypeEnum>
    </enumValues>
    <generateCode>true</generateCode>
  </enumType>
  <!-- Cardinality Enumeration type -->
  <enumType>
    <alias>cardinalityEnum</alias>
    <name>Cardinality</name>
    <inherits>enumValue</inherits>
    <enumValues>
      <cardinalityEnum>
        <name>One to one</name>
        <alias>oneToOne</alias>
      </cardinalityEnum>
      <cardinalityEnum>
        <name>Many to one</name>
        <alias>manyToOne</alias>
      </cardinalityEnum>
      <cardinalityEnum>
        <name>One to many</name>
        <alias>oneToMany</alias>
      </cardinalityEnum>
      <cardinalityEnum>
        <name>Many to many</name>
        <alias>manyToMany</alias>
      </cardinalityEnum>
    </enumValues>
    <generateCode>true</generateCode>
  </enumType>
  <!-- Resource Flags enum -->
  <enumType>
    <alias>resourceFlagsEnum</alias>
    <name>Resource Flags</name>
    <inherits>enumValue</inherits>
    <enumValues>
      <resourceFlagsEnum>
        <name>System</name>
        <alias>systemFlag</alias>
      </resourceFlagsEnum>
      <resourceFlagsEnum>
        <name>Read-Only</name>
        <alias>readOnlyFlag</alias>
      </resourceFlagsEnum>
      <resourceFlagsEnum>
        <name>No Delete</name>
        <alias>noDeleteFlag</alias>
      </resourceFlagsEnum>
    </enumValues>
    <generateCode>true</generateCode>
  </enumType>
  <!-- Type of relationship -->
  <relationship>
    <name>Relationship type</name>
    <description>Describes the semantic meaning of the relationship. Controls its behavior in clone, delete and deploy scenarios.</description>
    <alias>relType</alias>
    <relType>relChoiceField</relType>
    <fromType>relationship</fromType>
    <toType>relTypeEnum</toType>
    <generateCode>true</generateCode>
    <relationshipInFromTypeGroup>relationshipDetails</relationshipInFromTypeGroup>
  </relationship>
  <!-- Cardinality of relationship -->
  <relationship>
    <name>Cardinality</name>
    <alias>cardinality</alias>
    <relType>relChoiceField</relType>
    <fromType>relationship</fromType>
    <toType>cardinalityEnum</toType>
    <generateCode>true</generateCode>
    <relationshipInFromTypeGroup>relationshipDetails</relationshipInFromTypeGroup>
  </relationship>
  <!-- The relationship 'defaultRelateTo' relationship -->
  <!-- TODO: Reconcile with toTypeDefaultValue -->
  <relationship>
    <alias>defaultPointTo</alias>
    <name>Default value</name>
    <description>Describes the default value for a relationship or choice field.</description>
    <relType>relLookup</relType>
    <fromType>relationship</fromType>
    <toType>resource</toType>
    <generateCode>true</generateCode>
    <hideOnToType>true</hideOnToType>
    <hideOnFromType>true</hideOnFromType>
  </relationship>
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!--    VIRTUAL RELATIONSHIPS                                         -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- 'Relationship type' type -->
  <type>
    <name>Virtual Relationship</name>
    <description>Describes a relationship that is composed implicitly built from other relationships via one or more reports.</description>
    <alias>virtualRelationship</alias>
    <inherits>relationship</inherits>
    <generateCode>true</generateCode>
    <fieldGroups>
      <fieldGroup>
        <name>Virtual Relationship Details</name>
        <alias>virtualRelationshipDetails</alias>
      </fieldGroup>
    </fieldGroups>
    <!-- The relationship 'defaultRelateTo' relationship -->
  </type>
  <relationship>
    <alias>reportUsedByVirtualRelationship</alias>
    <reverseAlias>virtualRelationshipReport</reverseAlias>
    <name>Virtual relationship report</name>
    <description>Describes the report(s) used to compose a virtual relationship.</description>
    <relType>relManyToMany</relType>
    <fromType>report</fromType>
    <fromName>Reports</fromName>
    <toType>virtualRelationship</toType>
    <toName>Used by virtual relationship</toName>
    <generateCode>true</generateCode>
    <hideOnFromType>true</hideOnFromType>
    <relationshipInToTypeGroup>virtualRelationshipDetails</relationshipInToTypeGroup>
  </relationship>
  <!-- The relationships 'Clone Action' -->
  <relationship>
    <alias>cloneAction</alias>
    <name>Clone action</name>
    <description>Describes the Clone Action to take for this relationship.</description>
    <relType>relChoiceField</relType>
    <fromType>relationship</fromType>
    <toType>cloneActionEnum</toType>
    <generateCode>true</generateCode>
    <relationshipInFromTypeGroup>relationshipDetails</relationshipInFromTypeGroup>
  </relationship>
  <!-- The relationships 'Reverse Clone Action' -->
  <relationship>
    <alias>reverseCloneAction</alias>
    <name>Reverse clone action</name>
    <description>Describes the Reverse Clone Action to take for this relationship.</description>
    <relType>relChoiceField</relType>
    <fromType>relationship</fromType>
    <toType>cloneActionEnum</toType>
    <generateCode>true</generateCode>
    <relationshipInFromTypeGroup>relationshipDetails</relationshipInFromTypeGroup>
  </relationship>
  <!-- Relationship to field group on the to type -->
  <relationship>
    <name>Relationship belongs to to-type group</name>
    <alias>relationshipInToTypeGroup</alias>
    <reverseAlias>toTypeFieldGroupRelationships</reverseAlias>
    <relType>relLookup</relType>
    <fromType>relationship</fromType>
    <toType>fieldGroup</toType>
    <securesTo>true</securesTo>
    <generateCode>true</generateCode>
    <relationshipInFromTypeGroup>relationshipDetails</relationshipInFromTypeGroup>
  </relationship>
  <!-- Relationship to field group on the from type -->
  <relationship>
    <name>Relationship belongs to from-type group</name>
    <alias>relationshipInFromTypeGroup</alias>
    <reverseAlias>fromTypeFieldGroupRelationships</reverseAlias>
    <relType>relLookup</relType>
    <fromType>relationship</fromType>
    <toType>fieldGroup</toType>
    <securesTo>true</securesTo>
    <generateCode>true</generateCode>
    <relationshipInFromTypeGroup>relationshipDetails</relationshipInFromTypeGroup>
  </relationship>
  <!-- Resource has system flags -->
  <relationship>
    <name>Resource flags</name>
    <alias>flags</alias>
    <reverseAlias>flagUsedBy</reverseAlias>
    <relType>relMultiChoiceField</relType>
    <fromType>resource</fromType>
    <toType>resourceFlagsEnum</toType>
    <generateCode>true</generateCode>
    <hideOnFromTypeDefaultForm>true</hideOnFromTypeDefaultForm>
    <hideOnToTypeDefaultForm>true</hideOnToTypeDefaultForm>
    <hideOnFromType>true</hideOnFromType>
    <hideOnToType>true</hideOnToType>
  </relationship>
  <!-- Type specifies instance flags -->
  <relationship>
    <name>Instance flags</name>
    <alias>instanceFlags</alias>
    <reverseAlias>flagUsedByInstance</reverseAlias>
    <relType>relMultiChoiceField</relType>
    <fromType>type</fromType>
    <toType>resourceFlagsEnum</toType>
    <generateCode>true</generateCode>
    <hideOnFromType>true</hideOnFromType>
    <hideOnFromTypeDefaultForm>true</hideOnFromTypeDefaultForm>
    <hideOnToTypeDefaultForm>true</hideOnToTypeDefaultForm>
    <relationshipInFromTypeGroup>typeDetails</relationshipInFromTypeGroup>
  </relationship>
  <!-- Known field type Enumeration -->
  <enumType>
    <alias>fieldRepresentsEnum</alias>
    <name>Field Represents Enumeration</name>
    <inherits>enumValue</inherits>
    <enumValues>
      <fieldRepresentsEnum>
        <name>Email Address</name>
        <alias>fieldRepresentsEmail</alias>
      </fieldRepresentsEnum>
      <fieldRepresentsEnum>
        <name>URL</name>
        <alias>fieldRepresentsUrl</alias>
      </fieldRepresentsEnum>
      <fieldRepresentsEnum>
        <name>Phone Number</name>
        <alias>fieldRepresentsPhoneNumber</alias>
      </fieldRepresentsEnum>
      <fieldRepresentsEnum>
        <name>Colour</name>
        <alias>fieldRepresentsColor</alias>
      </fieldRepresentsEnum>
      <fieldRepresentsEnum>
        <name>Password</name>
        <alias>fieldRepresentsPassword</alias>
      </fieldRepresentsEnum>
    </enumValues>
    <generateCode>true</generateCode>
  </enumType>
</resources>